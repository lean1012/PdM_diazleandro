#include "sht4x.h"
#include <stdint.h>
#include <stdbool.h>




int8_t sht4x_write(uint8_t address, const uint8_t* data, uint16_t data_length);

int8_t sht4x_read(uint8_t address, const uint8_t* data, uint16_t data_length);

int8_t sht4x_sleep(uint8_t* data);

void sht4x_print();

void sht4x_init_port(void* p_i2c);


uint16_t buffer_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}



int8_t sht4x_init(void * i2c_init){
	sht4x_init_port(i2c_init);
}

int8_t sht4x_read_serial_number(uint16_t * p_serial_number){
	uint8_t buffer[6];
	uint8_t err;
	buffer[0] = SHT4X_SERIAL_NUMBER;
	err = sht4x_write(SHT4X_I2C_ADDRESS,buffer,1);
	if (err < 0) {
		return err;
	}
	sht4x_sleep(SHT4X_SLEEP);
	err = sht4x_read(SHT4X_I2C_ADDRESS,buffer,sizeof(buffer));

	if (err < 0) {
			return err;
	}
	*p_serial_number = buffer[0]*256 + buffer[1];
	return 0;
}

int8_t sht4x_read_temp_hum_low_presition(uint16_t * p_serial_number){
	uint8_t buffer[6];
	uint8_t err;

	buffer[0] = SHT4X_CMD_MEASURE_LPM;
	err = sht4x_write(SHT4X_I2C_ADDRESS,buffer,1);
	if (err < 0) {
		sht4x_print("Error en la escritura. \n");
		return err;
	}
	sht4x_sleep(SHT4X_SLEEP);

	err = sht4x_read(SHT4X_I2C_ADDRESS,buffer,sizeof(buffer));
	if (err < 0) {
		sht4x_print("Error en la lectura.\n");
		return err;
	}

	uint16_t temp = 0;
	uint16_t hum = 0;
	temp = buffer_to_uint16_t(&buffer[0]);
	hum = buffer_to_uint16_t(&buffer[2]);


	return 0;
}




