/*
 * API_mensurement.c
 *
 *  Created on: Apr 12, 2023
 *      Author: leandro
 */

#include "API_measurement.h"
#include "API_delay.h"
#include "sht4x"
#include "sunrise.h"


typedef enum{
	IDLE,
	MEASURMENT,
	PRINT,
	CONFIGURATION,
} measurment_state_t;

delay_t measurement_period;
uint16_t period_ms = 500;

static measurment_state_t actual_state;


void measurement_FSM_init();		// debe cargar el estado inicial
void measurement_FSM_update();	// debe leer las entradas, resolver la lógica de
					// transición de estados y actualizar las salidas



//delayInit(&led_seq_delay[i],led_delay_seq[i]);
void measurement_FSM_init(){
	actual_state = IDLE;
}

void measurement(){

	if(delayRead(&measurement_period)){
		  sht4x_read_serial_number(&hola);
		  sunrise_read_co2(&hola);
		  actual_state = PRINT;
	}

}

void print_measurement(){
	actual_state = MEASURMENT;
	delayInit(&measurement_period, period_ms);
}

void measurement_FSM_update(){
	switch(actual_state){

			case IDLE:
				//nothing
			break;

			case MEASURMENT:

			break;

			case PRINT:

			break;

			case CONFIGURATION:
				//configuration_FSM();
			break;

			default:
				actual_state=IDLE;
			break;

		}
}

void configuration_FSM(){

	switch(actual_state){

				case IDLE:
					//nothing
				break;

				case MEASURMENT:

				break;

				case CONFIGURATION:
					//configuration_FSM();
				break;

				default:
					actual_state=IDLE;
				break;

			}
}
