
TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004154  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004394  08004394  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800439c  0800439c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080043a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          000000f4  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d712  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c8  00000000  00000000  0002d776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a98  00000000  00000000  000307e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c5c  00000000  00000000  00031280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013091  00000000  00000000  00057edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2da2  00000000  00000000  0006af6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014dd0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e84  00000000  00000000  0014dd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000034 	.word	0x20000034
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080042ec 	.word	0x080042ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000038 	.word	0x20000038
 80001ec:	080042ec 	.word	0x080042ec

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2uiz>:
 80007cc:	004a      	lsls	r2, r1, #1
 80007ce:	d211      	bcs.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d4:	d211      	bcs.n	80007fa <__aeabi_d2uiz+0x2e>
 80007d6:	d50d      	bpl.n	80007f4 <__aeabi_d2uiz+0x28>
 80007d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e0:	d40e      	bmi.n	8000800 <__aeabi_d2uiz+0x34>
 80007e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ee:	fa23 f002 	lsr.w	r0, r3, r2
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007fe:	d102      	bne.n	8000806 <__aeabi_d2uiz+0x3a>
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000804:	4770      	bx	lr
 8000806:	f04f 0000 	mov.w	r0, #0
 800080a:	4770      	bx	lr

0800080c <__aeabi_uldivmod>:
 800080c:	b953      	cbnz	r3, 8000824 <__aeabi_uldivmod+0x18>
 800080e:	b94a      	cbnz	r2, 8000824 <__aeabi_uldivmod+0x18>
 8000810:	2900      	cmp	r1, #0
 8000812:	bf08      	it	eq
 8000814:	2800      	cmpeq	r0, #0
 8000816:	bf1c      	itt	ne
 8000818:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800081c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000820:	f000 b974 	b.w	8000b0c <__aeabi_idiv0>
 8000824:	f1ad 0c08 	sub.w	ip, sp, #8
 8000828:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800082c:	f000 f806 	bl	800083c <__udivmoddi4>
 8000830:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000838:	b004      	add	sp, #16
 800083a:	4770      	bx	lr

0800083c <__udivmoddi4>:
 800083c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000840:	9d08      	ldr	r5, [sp, #32]
 8000842:	4604      	mov	r4, r0
 8000844:	468e      	mov	lr, r1
 8000846:	2b00      	cmp	r3, #0
 8000848:	d14d      	bne.n	80008e6 <__udivmoddi4+0xaa>
 800084a:	428a      	cmp	r2, r1
 800084c:	4694      	mov	ip, r2
 800084e:	d969      	bls.n	8000924 <__udivmoddi4+0xe8>
 8000850:	fab2 f282 	clz	r2, r2
 8000854:	b152      	cbz	r2, 800086c <__udivmoddi4+0x30>
 8000856:	fa01 f302 	lsl.w	r3, r1, r2
 800085a:	f1c2 0120 	rsb	r1, r2, #32
 800085e:	fa20 f101 	lsr.w	r1, r0, r1
 8000862:	fa0c fc02 	lsl.w	ip, ip, r2
 8000866:	ea41 0e03 	orr.w	lr, r1, r3
 800086a:	4094      	lsls	r4, r2
 800086c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000870:	0c21      	lsrs	r1, r4, #16
 8000872:	fbbe f6f8 	udiv	r6, lr, r8
 8000876:	fa1f f78c 	uxth.w	r7, ip
 800087a:	fb08 e316 	mls	r3, r8, r6, lr
 800087e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000882:	fb06 f107 	mul.w	r1, r6, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d90a      	bls.n	80008a0 <__udivmoddi4+0x64>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000892:	f080 811f 	bcs.w	8000ad4 <__udivmoddi4+0x298>
 8000896:	4299      	cmp	r1, r3
 8000898:	f240 811c 	bls.w	8000ad4 <__udivmoddi4+0x298>
 800089c:	3e02      	subs	r6, #2
 800089e:	4463      	add	r3, ip
 80008a0:	1a5b      	subs	r3, r3, r1
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a8:	fb08 3310 	mls	r3, r8, r0, r3
 80008ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008b0:	fb00 f707 	mul.w	r7, r0, r7
 80008b4:	42a7      	cmp	r7, r4
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x92>
 80008b8:	eb1c 0404 	adds.w	r4, ip, r4
 80008bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008c0:	f080 810a 	bcs.w	8000ad8 <__udivmoddi4+0x29c>
 80008c4:	42a7      	cmp	r7, r4
 80008c6:	f240 8107 	bls.w	8000ad8 <__udivmoddi4+0x29c>
 80008ca:	4464      	add	r4, ip
 80008cc:	3802      	subs	r0, #2
 80008ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008d2:	1be4      	subs	r4, r4, r7
 80008d4:	2600      	movs	r6, #0
 80008d6:	b11d      	cbz	r5, 80008e0 <__udivmoddi4+0xa4>
 80008d8:	40d4      	lsrs	r4, r2
 80008da:	2300      	movs	r3, #0
 80008dc:	e9c5 4300 	strd	r4, r3, [r5]
 80008e0:	4631      	mov	r1, r6
 80008e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e6:	428b      	cmp	r3, r1
 80008e8:	d909      	bls.n	80008fe <__udivmoddi4+0xc2>
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	f000 80ef 	beq.w	8000ace <__udivmoddi4+0x292>
 80008f0:	2600      	movs	r6, #0
 80008f2:	e9c5 0100 	strd	r0, r1, [r5]
 80008f6:	4630      	mov	r0, r6
 80008f8:	4631      	mov	r1, r6
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fe:	fab3 f683 	clz	r6, r3
 8000902:	2e00      	cmp	r6, #0
 8000904:	d14a      	bne.n	800099c <__udivmoddi4+0x160>
 8000906:	428b      	cmp	r3, r1
 8000908:	d302      	bcc.n	8000910 <__udivmoddi4+0xd4>
 800090a:	4282      	cmp	r2, r0
 800090c:	f200 80f9 	bhi.w	8000b02 <__udivmoddi4+0x2c6>
 8000910:	1a84      	subs	r4, r0, r2
 8000912:	eb61 0303 	sbc.w	r3, r1, r3
 8000916:	2001      	movs	r0, #1
 8000918:	469e      	mov	lr, r3
 800091a:	2d00      	cmp	r5, #0
 800091c:	d0e0      	beq.n	80008e0 <__udivmoddi4+0xa4>
 800091e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000922:	e7dd      	b.n	80008e0 <__udivmoddi4+0xa4>
 8000924:	b902      	cbnz	r2, 8000928 <__udivmoddi4+0xec>
 8000926:	deff      	udf	#255	; 0xff
 8000928:	fab2 f282 	clz	r2, r2
 800092c:	2a00      	cmp	r2, #0
 800092e:	f040 8092 	bne.w	8000a56 <__udivmoddi4+0x21a>
 8000932:	eba1 010c 	sub.w	r1, r1, ip
 8000936:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093a:	fa1f fe8c 	uxth.w	lr, ip
 800093e:	2601      	movs	r6, #1
 8000940:	0c20      	lsrs	r0, r4, #16
 8000942:	fbb1 f3f7 	udiv	r3, r1, r7
 8000946:	fb07 1113 	mls	r1, r7, r3, r1
 800094a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800094e:	fb0e f003 	mul.w	r0, lr, r3
 8000952:	4288      	cmp	r0, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x12c>
 8000956:	eb1c 0101 	adds.w	r1, ip, r1
 800095a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0x12a>
 8000960:	4288      	cmp	r0, r1
 8000962:	f200 80cb 	bhi.w	8000afc <__udivmoddi4+0x2c0>
 8000966:	4643      	mov	r3, r8
 8000968:	1a09      	subs	r1, r1, r0
 800096a:	b2a4      	uxth	r4, r4
 800096c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000970:	fb07 1110 	mls	r1, r7, r0, r1
 8000974:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000978:	fb0e fe00 	mul.w	lr, lr, r0
 800097c:	45a6      	cmp	lr, r4
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x156>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x154>
 800098a:	45a6      	cmp	lr, r4
 800098c:	f200 80bb 	bhi.w	8000b06 <__udivmoddi4+0x2ca>
 8000990:	4608      	mov	r0, r1
 8000992:	eba4 040e 	sub.w	r4, r4, lr
 8000996:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800099a:	e79c      	b.n	80008d6 <__udivmoddi4+0x9a>
 800099c:	f1c6 0720 	rsb	r7, r6, #32
 80009a0:	40b3      	lsls	r3, r6
 80009a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009aa:	fa20 f407 	lsr.w	r4, r0, r7
 80009ae:	fa01 f306 	lsl.w	r3, r1, r6
 80009b2:	431c      	orrs	r4, r3
 80009b4:	40f9      	lsrs	r1, r7
 80009b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009ba:	fa00 f306 	lsl.w	r3, r0, r6
 80009be:	fbb1 f8f9 	udiv	r8, r1, r9
 80009c2:	0c20      	lsrs	r0, r4, #16
 80009c4:	fa1f fe8c 	uxth.w	lr, ip
 80009c8:	fb09 1118 	mls	r1, r9, r8, r1
 80009cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d0:	fb08 f00e 	mul.w	r0, r8, lr
 80009d4:	4288      	cmp	r0, r1
 80009d6:	fa02 f206 	lsl.w	r2, r2, r6
 80009da:	d90b      	bls.n	80009f4 <__udivmoddi4+0x1b8>
 80009dc:	eb1c 0101 	adds.w	r1, ip, r1
 80009e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009e4:	f080 8088 	bcs.w	8000af8 <__udivmoddi4+0x2bc>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f240 8085 	bls.w	8000af8 <__udivmoddi4+0x2bc>
 80009ee:	f1a8 0802 	sub.w	r8, r8, #2
 80009f2:	4461      	add	r1, ip
 80009f4:	1a09      	subs	r1, r1, r0
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000a00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a08:	458e      	cmp	lr, r1
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x1e2>
 8000a0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a14:	d26c      	bcs.n	8000af0 <__udivmoddi4+0x2b4>
 8000a16:	458e      	cmp	lr, r1
 8000a18:	d96a      	bls.n	8000af0 <__udivmoddi4+0x2b4>
 8000a1a:	3802      	subs	r0, #2
 8000a1c:	4461      	add	r1, ip
 8000a1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a22:	fba0 9402 	umull	r9, r4, r0, r2
 8000a26:	eba1 010e 	sub.w	r1, r1, lr
 8000a2a:	42a1      	cmp	r1, r4
 8000a2c:	46c8      	mov	r8, r9
 8000a2e:	46a6      	mov	lr, r4
 8000a30:	d356      	bcc.n	8000ae0 <__udivmoddi4+0x2a4>
 8000a32:	d053      	beq.n	8000adc <__udivmoddi4+0x2a0>
 8000a34:	b15d      	cbz	r5, 8000a4e <__udivmoddi4+0x212>
 8000a36:	ebb3 0208 	subs.w	r2, r3, r8
 8000a3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a42:	fa22 f306 	lsr.w	r3, r2, r6
 8000a46:	40f1      	lsrs	r1, r6
 8000a48:	431f      	orrs	r7, r3
 8000a4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a4e:	2600      	movs	r6, #0
 8000a50:	4631      	mov	r1, r6
 8000a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a56:	f1c2 0320 	rsb	r3, r2, #32
 8000a5a:	40d8      	lsrs	r0, r3
 8000a5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a60:	fa21 f303 	lsr.w	r3, r1, r3
 8000a64:	4091      	lsls	r1, r2
 8000a66:	4301      	orrs	r1, r0
 8000a68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6c:	fa1f fe8c 	uxth.w	lr, ip
 8000a70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a74:	fb07 3610 	mls	r6, r7, r0, r3
 8000a78:	0c0b      	lsrs	r3, r1, #16
 8000a7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a82:	429e      	cmp	r6, r3
 8000a84:	fa04 f402 	lsl.w	r4, r4, r2
 8000a88:	d908      	bls.n	8000a9c <__udivmoddi4+0x260>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a92:	d22f      	bcs.n	8000af4 <__udivmoddi4+0x2b8>
 8000a94:	429e      	cmp	r6, r3
 8000a96:	d92d      	bls.n	8000af4 <__udivmoddi4+0x2b8>
 8000a98:	3802      	subs	r0, #2
 8000a9a:	4463      	add	r3, ip
 8000a9c:	1b9b      	subs	r3, r3, r6
 8000a9e:	b289      	uxth	r1, r1
 8000aa0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aa4:	fb07 3316 	mls	r3, r7, r6, r3
 8000aa8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aac:	fb06 f30e 	mul.w	r3, r6, lr
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	d908      	bls.n	8000ac6 <__udivmoddi4+0x28a>
 8000ab4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000abc:	d216      	bcs.n	8000aec <__udivmoddi4+0x2b0>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d914      	bls.n	8000aec <__udivmoddi4+0x2b0>
 8000ac2:	3e02      	subs	r6, #2
 8000ac4:	4461      	add	r1, ip
 8000ac6:	1ac9      	subs	r1, r1, r3
 8000ac8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000acc:	e738      	b.n	8000940 <__udivmoddi4+0x104>
 8000ace:	462e      	mov	r6, r5
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	e705      	b.n	80008e0 <__udivmoddi4+0xa4>
 8000ad4:	4606      	mov	r6, r0
 8000ad6:	e6e3      	b.n	80008a0 <__udivmoddi4+0x64>
 8000ad8:	4618      	mov	r0, r3
 8000ada:	e6f8      	b.n	80008ce <__udivmoddi4+0x92>
 8000adc:	454b      	cmp	r3, r9
 8000ade:	d2a9      	bcs.n	8000a34 <__udivmoddi4+0x1f8>
 8000ae0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ae4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ae8:	3801      	subs	r0, #1
 8000aea:	e7a3      	b.n	8000a34 <__udivmoddi4+0x1f8>
 8000aec:	4646      	mov	r6, r8
 8000aee:	e7ea      	b.n	8000ac6 <__udivmoddi4+0x28a>
 8000af0:	4620      	mov	r0, r4
 8000af2:	e794      	b.n	8000a1e <__udivmoddi4+0x1e2>
 8000af4:	4640      	mov	r0, r8
 8000af6:	e7d1      	b.n	8000a9c <__udivmoddi4+0x260>
 8000af8:	46d0      	mov	r8, sl
 8000afa:	e77b      	b.n	80009f4 <__udivmoddi4+0x1b8>
 8000afc:	3b02      	subs	r3, #2
 8000afe:	4461      	add	r1, ip
 8000b00:	e732      	b.n	8000968 <__udivmoddi4+0x12c>
 8000b02:	4630      	mov	r0, r6
 8000b04:	e709      	b.n	800091a <__udivmoddi4+0xde>
 8000b06:	4464      	add	r4, ip
 8000b08:	3802      	subs	r0, #2
 8000b0a:	e742      	b.n	8000992 <__udivmoddi4+0x156>

08000b0c <__aeabi_idiv0>:
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <buttonPressed>:

static delay_t delay;
static debounceState_t actual_state;
static bool_t key_press;

static void buttonPressed(){
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	//BSP_LED_Toggle(LED_GREEN);
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <buttonReleased>:
/*
 * Tooglea el LED ROJO (LED3)
 */
static void buttonReleased(){
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
	//BSP_LED_Toggle(LED_RED);
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <debounceFSM_init>:
/*
 * Incializa la máquina de estados en BUTTON_UP
 */
void debounceFSM_init(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	actual_state = BUTTON_UP;
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <debounceFSM_init+0x18>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	delayInit(&delay, DEBOUNCE_TIME);
 8000b36:	2128      	movs	r1, #40	; 0x28
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <debounceFSM_init+0x1c>)
 8000b3a:	f000 f88d 	bl	8000c58 <delayInit>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000005c 	.word	0x2000005c
 8000b48:	20000050 	.word	0x20000050

08000b4c <debounceFSM_update>:
/*
 * Máquina de estados para resolver los problemas de rebote del botón
 * mediante Software usando retardo no bloqueante definido en DEBOUNCE_TIME
 */
void debounceFSM_update(){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

	switch(actual_state){
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <debounceFSM_update+0xd8>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d85c      	bhi.n	8000c12 <debounceFSM_update+0xc6>
 8000b58:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <debounceFSM_update+0x14>)
 8000b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5e:	bf00      	nop
 8000b60:	08000b71 	.word	0x08000b71
 8000b64:	08000b93 	.word	0x08000b93
 8000b68:	08000bc5 	.word	0x08000bc5
 8000b6c:	08000be7 	.word	0x08000be7

		case BUTTON_UP:
			if(BSP_PB_GetState(BUTTON_USER)){
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 fd47 	bl	8001604 <BSP_PB_GetState>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <debounceFSM_update+0x3e>
				actual_state = BUTTON_FALLING;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <debounceFSM_update+0xd8>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
				delayRead(&delay); //disparo el timer para irme al proximo estado con el timer activo;
 8000b82:	4829      	ldr	r0, [pc, #164]	; (8000c28 <debounceFSM_update+0xdc>)
 8000b84:	f000 f87c 	bl	8000c80 <delayRead>
			}else{
				actual_state = BUTTON_UP;
			}

		break;
 8000b88:	e04a      	b.n	8000c20 <debounceFSM_update+0xd4>
				actual_state = BUTTON_UP;
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <debounceFSM_update+0xd8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
		break;
 8000b90:	e046      	b.n	8000c20 <debounceFSM_update+0xd4>

		case BUTTON_FALLING:
			//espero 40milisegundos y pregunto como está el botón
			if(delayRead(&delay)){
 8000b92:	4825      	ldr	r0, [pc, #148]	; (8000c28 <debounceFSM_update+0xdc>)
 8000b94:	f000 f874 	bl	8000c80 <delayRead>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d03d      	beq.n	8000c1a <debounceFSM_update+0xce>
				if(BSP_PB_GetState(BUTTON_USER)){
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 fd30 	bl	8001604 <BSP_PB_GetState>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d008      	beq.n	8000bbc <debounceFSM_update+0x70>
					actual_state = BUTTON_DOWN;
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <debounceFSM_update+0xd8>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	701a      	strb	r2, [r3, #0]
					buttonPressed();
 8000bb0:	f7ff ffae 	bl	8000b10 <buttonPressed>
					key_press = true;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <debounceFSM_update+0xe0>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
				}else{
					actual_state = BUTTON_UP;
				}
			}
		break;
 8000bba:	e02e      	b.n	8000c1a <debounceFSM_update+0xce>
					actual_state = BUTTON_UP;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <debounceFSM_update+0xd8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
		break;
 8000bc2:	e02a      	b.n	8000c1a <debounceFSM_update+0xce>

		case BUTTON_DOWN:
			if(BSP_PB_GetState(BUTTON_USER)){
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 fd1d 	bl	8001604 <BSP_PB_GetState>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <debounceFSM_update+0x8c>
				actual_state = BUTTON_DOWN;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <debounceFSM_update+0xd8>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	701a      	strb	r2, [r3, #0]
			}else{
				actual_state = BUTTON_RAISING;
				delayRead(&delay); //disparo el timer para irme al proximo estado con el timer activo;
			}
		break;
 8000bd6:	e023      	b.n	8000c20 <debounceFSM_update+0xd4>
				actual_state = BUTTON_RAISING;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <debounceFSM_update+0xd8>)
 8000bda:	2203      	movs	r2, #3
 8000bdc:	701a      	strb	r2, [r3, #0]
				delayRead(&delay); //disparo el timer para irme al proximo estado con el timer activo;
 8000bde:	4812      	ldr	r0, [pc, #72]	; (8000c28 <debounceFSM_update+0xdc>)
 8000be0:	f000 f84e 	bl	8000c80 <delayRead>
		break;
 8000be4:	e01c      	b.n	8000c20 <debounceFSM_update+0xd4>

		case BUTTON_RAISING:
			//espero 40milisegundos y pregunto como está el botón
			if(delayRead(&delay)){
 8000be6:	4810      	ldr	r0, [pc, #64]	; (8000c28 <debounceFSM_update+0xdc>)
 8000be8:	f000 f84a 	bl	8000c80 <delayRead>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d015      	beq.n	8000c1e <debounceFSM_update+0xd2>
				if(BSP_PB_GetState(BUTTON_USER)){
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 fd06 	bl	8001604 <BSP_PB_GetState>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <debounceFSM_update+0xba>
					actual_state = BUTTON_DOWN;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <debounceFSM_update+0xd8>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	701a      	strb	r2, [r3, #0]
					actual_state = BUTTON_UP;
					buttonReleased();

				}
			}
		break;
 8000c04:	e00b      	b.n	8000c1e <debounceFSM_update+0xd2>
					actual_state = BUTTON_UP;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <debounceFSM_update+0xd8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
					buttonReleased();
 8000c0c:	f7ff ff87 	bl	8000b1e <buttonReleased>
		break;
 8000c10:	e005      	b.n	8000c1e <debounceFSM_update+0xd2>

		default:
			actual_state=BUTTON_UP;
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <debounceFSM_update+0xd8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
		break;
 8000c18:	e002      	b.n	8000c20 <debounceFSM_update+0xd4>
		break;
 8000c1a:	bf00      	nop
 8000c1c:	e000      	b.n	8000c20 <debounceFSM_update+0xd4>
		break;
 8000c1e:	bf00      	nop

	}

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000005c 	.word	0x2000005c
 8000c28:	20000050 	.word	0x20000050
 8000c2c:	2000005d 	.word	0x2000005d

08000c30 <readKey>:

bool_t readKey(){
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	if(key_press){
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <readKey+0x24>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <readKey+0x16>
		key_press = false;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <readKey+0x24>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
		return true;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <readKey+0x18>
	}else{
		return false;
 8000c46:	2300      	movs	r3, #0
	}
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	2000005d 	.word	0x2000005d

08000c58 <delayInit>:
#include "API_delay.h"


void delayInit( delay_t * delay, tick_t duration ){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	721a      	strb	r2, [r3, #8]
	delay->startTime = 0;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]

}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <delayRead>:
bool_t delayRead( delay_t * delay ){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

	if(delay->running){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7a1b      	ldrb	r3, [r3, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00e      	beq.n	8000cae <delayRead+0x2e>
		if(HAL_GetTick()-delay->startTime >= delay->duration){
 8000c90:	f000 fd92 	bl	80017b8 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	1ad2      	subs	r2, r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d30c      	bcc.n	8000cbe <delayRead+0x3e>
			delay->running=false;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	721a      	strb	r2, [r3, #8]
			return true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e008      	b.n	8000cc0 <delayRead+0x40>
		}
	}else{
		delay->startTime=HAL_GetTick();
 8000cae:	f000 fd83 	bl	80017b8 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	721a      	strb	r2, [r3, #8]
	}

	return false;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <clickStateFSM_init>:
static clickState_t actual_state_click;

/*
 * Incializa la máquina de estados en BUTTON_UP
 */
void clickStateFSM_init() {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	actual_state_click = IDLE;
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <clickStateFSM_init+0x18>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
	delayInit(&delay_click, 500);
 8000cd2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <clickStateFSM_init+0x1c>)
 8000cd8:	f7ff ffbe 	bl	8000c58 <delayInit>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000006c 	.word	0x2000006c
 8000ce4:	20000060 	.word	0x20000060

08000ce8 <clickFSM_update>:
 * Máquina de estados para resolver los problemas de rebote del botón
 * mediante Software usando retardo no bloqueante definido en DEBOUNCE_TIME
 */

static uint8_t click_count = 0;
void clickFSM_update() {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

	switch (actual_state_click) {
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <clickFSM_update+0x68>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <clickFSM_update+0x12>
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d00c      	beq.n	8000d12 <clickFSM_update+0x2a>
 8000cf8:	e021      	b.n	8000d3e <clickFSM_update+0x56>

	case IDLE:
		if (readKey()) {
 8000cfa:	f7ff ff99 	bl	8000c30 <readKey>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d020      	beq.n	8000d46 <clickFSM_update+0x5e>
			actual_state_click = READY;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <clickFSM_update+0x68>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
			delayRead(&delay_click); //disparo el timer
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <clickFSM_update+0x6c>)
 8000d0c:	f7ff ffb8 	bl	8000c80 <delayRead>
		}
		break;
 8000d10:	e019      	b.n	8000d46 <clickFSM_update+0x5e>

	case READY:

		if (delayRead(&delay_click)) {
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <clickFSM_update+0x6c>)
 8000d14:	f7ff ffb4 	bl	8000c80 <delayRead>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d015      	beq.n	8000d4a <clickFSM_update+0x62>
			if (readKey()) {
 8000d1e:	f7ff ff87 	bl	8000c30 <readKey>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <clickFSM_update+0x48>

				click_count = 2;
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <clickFSM_update+0x70>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e002      	b.n	8000d36 <clickFSM_update+0x4e>
			} else {

				click_count = 1;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <clickFSM_update+0x70>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]

			}
			actual_state_click = IDLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <clickFSM_update+0x68>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
		}

		break;
 8000d3c:	e005      	b.n	8000d4a <clickFSM_update+0x62>

	default:
		actual_state_click = IDLE;
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <clickFSM_update+0x68>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
		break;
 8000d44:	e002      	b.n	8000d4c <clickFSM_update+0x64>
		break;
 8000d46:	bf00      	nop
 8000d48:	e000      	b.n	8000d4c <clickFSM_update+0x64>
		break;
 8000d4a:	bf00      	nop

	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000006c 	.word	0x2000006c
 8000d54:	20000060 	.word	0x20000060
 8000d58:	2000006d 	.word	0x2000006d

08000d5c <click>:

uint8_t click() {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
	uint8_t aux = click_count;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <click+0x20>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
	click_count = 0;
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <click+0x20>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
	return aux;
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	2000006d 	.word	0x2000006d

08000d80 <measurement_FSM_init>:
void measurement_FSM_init();		// debe cargar el estado inicial
void measurement_FSM_update();	// debe leer las entradas, resolver la lógica de
// transición de estados y actualizar las salidas

//delayInit(&led_seq_delay[i],led_delay_seq[i]);
void measurement_FSM_init() {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	actual_state = MEASURMENT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <measurement_FSM_init+0x20>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
	delayInit(&measurement_period, period_ms);
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <measurement_FSM_init+0x24>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <measurement_FSM_init+0x28>)
 8000d92:	f7ff ff61 	bl	8000c58 <delayInit>
	delayRead(&measurement_period);
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <measurement_FSM_init+0x28>)
 8000d98:	f7ff ff72 	bl	8000c80 <delayRead>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000082 	.word	0x20000082
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000070 	.word	0x20000070

08000dac <measurement>:

void measurement() {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

	sunrise_read_co2(&air_p.co2);
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <measurement+0x18>)
 8000db2:	f000 fb3f 	bl	8001434 <sunrise_read_co2>
	sht4x_temp_hum_low_presition(&air_p.temp, &air_p.hum);
 8000db6:	4904      	ldr	r1, [pc, #16]	; (8000dc8 <measurement+0x1c>)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <measurement+0x20>)
 8000dba:	f000 fa7b 	bl	80012b4 <sht4x_temp_hum_low_presition>

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000007c 	.word	0x2000007c
 8000dc8:	20000080 	.word	0x20000080
 8000dcc:	2000007e 	.word	0x2000007e

08000dd0 <print_measurement>:

void print_measurement() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0

	char buffer[10];

	uint8_t text_co2[] = "CO2: ";
 8000dd6:	4a42      	ldr	r2, [pc, #264]	; (8000ee0 <print_measurement+0x110>)
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de0:	6018      	str	r0, [r3, #0]
 8000de2:	3304      	adds	r3, #4
 8000de4:	8019      	strh	r1, [r3, #0]
	uartSendString(text_co2);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f918 	bl	8001020 <uartSendString>
	itoa(air_p.co2,buffer,10);   // here 2 means binary
 8000df0:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <print_measurement+0x114>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f003 fa29 	bl	8004254 <itoa>
	uartSendString(buffer);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f90a 	bl	8001020 <uartSendString>
	memset(buffer,0, sizeof(buffer));
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	220a      	movs	r2, #10
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fa1f 	bl	8004258 <memset>

	uint8_t tab[] = "\t";
 8000e1a:	2309      	movs	r3, #9
 8000e1c:	833b      	strh	r3, [r7, #24]
	uartSendString(tab);
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f8fc 	bl	8001020 <uartSendString>

	uint8_t text_temp[] = "Temp: ";
 8000e28:	4a2f      	ldr	r2, [pc, #188]	; (8000ee8 <print_measurement+0x118>)
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e32:	6018      	str	r0, [r3, #0]
 8000e34:	3304      	adds	r3, #4
 8000e36:	8019      	strh	r1, [r3, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	0c0a      	lsrs	r2, r1, #16
 8000e3c:	701a      	strb	r2, [r3, #0]
	uartSendString(text_temp);
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f8ec 	bl	8001020 <uartSendString>
	itoa(air_p.temp,buffer,10);   // here 2 means binary
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <print_measurement+0x114>)
 8000e4a:	885b      	ldrh	r3, [r3, #2]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	220a      	movs	r2, #10
 8000e54:	4619      	mov	r1, r3
 8000e56:	f003 f9fd 	bl	8004254 <itoa>
	uartSendString(buffer);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f8de 	bl	8001020 <uartSendString>
	memset(buffer,0, sizeof(buffer));
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	220a      	movs	r2, #10
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 f9f3 	bl	8004258 <memset>

	uartSendString(tab);
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f8d2 	bl	8001020 <uartSendString>

	uint8_t text_hum[] = "Hum: ";
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <print_measurement+0x11c>)
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e86:	6018      	str	r0, [r3, #0]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	8019      	strh	r1, [r3, #0]
	uartSendString(text_hum);
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f8c5 	bl	8001020 <uartSendString>
	itoa(air_p.hum,buffer,10);   // here 2 means binary
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <print_measurement+0x114>)
 8000e98:	889b      	ldrh	r3, [r3, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	220a      	movs	r2, #10
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f003 f9d6 	bl	8004254 <itoa>
	uartSendString(buffer);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f8b7 	bl	8001020 <uartSendString>
	memset(buffer,0, sizeof(buffer));
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	220a      	movs	r2, #10
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 f9cc 	bl	8004258 <memset>

	uint8_t text_fin[] = "\r\n";
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <print_measurement+0x120>)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	8019      	strh	r1, [r3, #0]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	701a      	strb	r2, [r3, #0]
	uartSendString(text_fin);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f8a4 	bl	8001020 <uartSendString>



}
 8000ed8:	bf00      	nop
 8000eda:	3730      	adds	r7, #48	; 0x30
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	08004304 	.word	0x08004304
 8000ee4:	2000007c 	.word	0x2000007c
 8000ee8:	0800430c 	.word	0x0800430c
 8000eec:	08004314 	.word	0x08004314
 8000ef0:	0800431c 	.word	0x0800431c

08000ef4 <measurement_FSM_update>:

void measurement_FSM_update() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	switch (actual_state) {
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d045      	beq.n	8000f8c <measurement_FSM_update+0x98>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	dc4c      	bgt.n	8000f9e <measurement_FSM_update+0xaa>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <measurement_FSM_update+0x1a>
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d019      	beq.n	8000f40 <measurement_FSM_update+0x4c>
 8000f0c:	e047      	b.n	8000f9e <measurement_FSM_update+0xaa>

	case IDLE:
		switch (click()) {
 8000f0e:	f7ff ff25 	bl	8000d5c <click>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d00e      	beq.n	8000f36 <measurement_FSM_update+0x42>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	dc44      	bgt.n	8000fa6 <measurement_FSM_update+0xb2>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <measurement_FSM_update+0x32>
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d004      	beq.n	8000f2e <measurement_FSM_update+0x3a>
			break;
		case 2:
			actual_state = CONFIGURATION;
			break;
		}
		break;
 8000f24:	e03f      	b.n	8000fa6 <measurement_FSM_update+0xb2>
			actual_state = IDLE;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
			break;
 8000f2c:	e007      	b.n	8000f3e <measurement_FSM_update+0x4a>
			actual_state = MEASURMENT;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
			break;
 8000f34:	e003      	b.n	8000f3e <measurement_FSM_update+0x4a>
			actual_state = CONFIGURATION;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]
			break;
 8000f3c:	bf00      	nop
		break;
 8000f3e:	e032      	b.n	8000fa6 <measurement_FSM_update+0xb2>

	case MEASURMENT:
		if (delayRead(&measurement_period)) {
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <measurement_FSM_update+0xc4>)
 8000f42:	f7ff fe9d 	bl	8000c80 <delayRead>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <measurement_FSM_update+0x66>
			measurement();
 8000f4c:	f7ff ff2e 	bl	8000dac <measurement>
			print_measurement();
 8000f50:	f7ff ff3e 	bl	8000dd0 <print_measurement>
			delayRead(&measurement_period); //disparo el timer
 8000f54:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <measurement_FSM_update+0xc4>)
 8000f56:	f7ff fe93 	bl	8000c80 <delayRead>
		}
		switch (click()) {
 8000f5a:	f7ff feff 	bl	8000d5c <click>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d00e      	beq.n	8000f82 <measurement_FSM_update+0x8e>
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	dc20      	bgt.n	8000faa <measurement_FSM_update+0xb6>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <measurement_FSM_update+0x7e>
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d004      	beq.n	8000f7a <measurement_FSM_update+0x86>
			break;
		case 2:
			actual_state = CONFIGURATION;
			break;
		}
		break;
 8000f70:	e01b      	b.n	8000faa <measurement_FSM_update+0xb6>
			actual_state = MEASURMENT;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
			break;
 8000f78:	e007      	b.n	8000f8a <measurement_FSM_update+0x96>
			actual_state = IDLE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
			break;
 8000f80:	e003      	b.n	8000f8a <measurement_FSM_update+0x96>
			actual_state = CONFIGURATION;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	701a      	strb	r2, [r3, #0]
			break;
 8000f88:	bf00      	nop
		break;
 8000f8a:	e00e      	b.n	8000faa <measurement_FSM_update+0xb6>

	case CONFIGURATION:
		if (click() != 0) {
 8000f8c:	f7ff fee6 	bl	8000d5c <click>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <measurement_FSM_update+0xba>
			actual_state = MEASURMENT;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f9c:	e007      	b.n	8000fae <measurement_FSM_update+0xba>

	default:
		actual_state = IDLE;
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <measurement_FSM_update+0xc0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
		break;
 8000fa4:	e004      	b.n	8000fb0 <measurement_FSM_update+0xbc>
		break;
 8000fa6:	bf00      	nop
 8000fa8:	e002      	b.n	8000fb0 <measurement_FSM_update+0xbc>
		break;
 8000faa:	bf00      	nop
 8000fac:	e000      	b.n	8000fb0 <measurement_FSM_update+0xbc>
		break;
 8000fae:	bf00      	nop

	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000082 	.word	0x20000082
 8000fb8:	20000070 	.word	0x20000070

08000fbc <uartInit>:
#define UART_BaudRate 115200

uint8_t conf_uart[]="UART INICIALIZADA EN 9600 8N1"; //(1 bit de inicio, 8 bits de datos, ningún (N) bit de paridad, y un (1) bit de parada)";


bool_t uartInit(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <uartInit+0x54>)
 8000fc2:	4a14      	ldr	r2, [pc, #80]	; (8001014 <uartInit+0x58>)
 8000fc4:	601a      	str	r2, [r3, #0]
	  UartHandle.Init.BaudRate   = UART_BaudRate;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <uartInit+0x54>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <uartInit+0x54>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <uartInit+0x54>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <uartInit+0x54>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <uartInit+0x54>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <uartInit+0x54>)
 8000fe8:	220c      	movs	r2, #12
 8000fea:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <uartInit+0x54>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <uartInit+0x54>)
 8000ff4:	f002 fbe8 	bl	80037c8 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <uartInit+0x46>
	  {
	    return false;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e003      	b.n	800100a <uartInit+0x4e>

	  }else{
	      uartSendString(conf_uart);
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <uartInit+0x5c>)
 8001004:	f000 f80c 	bl	8001020 <uartSendString>
		  return true;
 8001008:	2301      	movs	r3, #1

	  }
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000084 	.word	0x20000084
 8001014:	40004800 	.word	0x40004800
 8001018:	20000004 	.word	0x20000004
 800101c:	00000000 	.word	0x00000000

08001020 <uartSendString>:
void uartSendString(uint8_t * pstring){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

	//strlen cuenta los caracteres hasta un \0
	uint16_t size = strlen((char *)pstring);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff f8e1 	bl	80001f0 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	81fb      	strh	r3, [r7, #14]
	uint16_t uart_time_out = (uint16_t)(10.0*((size))*(1.0/UART_BaudRate)*10.0*1000.0);
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fb5f 	bl	80006f8 <__aeabi_i2d>
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <uartSendString+0x88>)
 8001040:	f7ff f8de 	bl	8000200 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	a314      	add	r3, pc, #80	; (adr r3, 80010a0 <uartSendString+0x80>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff f8d5 	bl	8000200 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <uartSendString+0x88>)
 8001064:	f7ff f8cc 	bl	8000200 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <uartSendString+0x8c>)
 8001076:	f7ff f8c3 	bl	8000200 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fba3 	bl	80007cc <__aeabi_d2uiz>
 8001086:	4603      	mov	r3, r0
 8001088:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&UartHandle,pstring,size,uart_time_out);
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	89fa      	ldrh	r2, [r7, #14]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <uartSendString+0x90>)
 8001092:	f002 fbe6 	bl	8003862 <HAL_UART_Transmit>


}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	789abcdf 	.word	0x789abcdf
 80010a4:	3ee23456 	.word	0x3ee23456
 80010a8:	40240000 	.word	0x40240000
 80010ac:	408f4000 	.word	0x408f4000
 80010b0:	20000084 	.word	0x20000084

080010b4 <buffer_to_uint16_t>:
#define RESPONSE_LENGHT 6




static uint16_t buffer_to_uint16_t(const uint8_t* bytes) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	b29b      	uxth	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <convert_ticks_to_celsius>:

static int16_t convert_ticks_to_celsius(uint16_t ticks) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	/**
	 * Temperature = 175 * S_T / 65535 - 45
	 */
    return ((ticks * 175) / 65535) - 45;
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	22af      	movs	r2, #175	; 0xaf
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <convert_ticks_to_celsius+0x34>)
 80010f4:	fb82 1203 	smull	r1, r2, r2, r3
 80010f8:	441a      	add	r2, r3
 80010fa:	13d2      	asrs	r2, r2, #15
 80010fc:	17db      	asrs	r3, r3, #31
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	3b2d      	subs	r3, #45	; 0x2d
 8001104:	b29b      	uxth	r3, r3
 8001106:	b21b      	sxth	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	80008001 	.word	0x80008001

08001118 <convert_ticks_to_percent_rh>:

static int16_t convert_ticks_to_percent_rh(uint16_t ticks) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	/**
	 * Relative Humidity = 125 * (S_RH / 65535) - 6
	 */
    return (((ticks * 125)) / 65535) - 6;
 8001122:	88fa      	ldrh	r2, [r7, #6]
 8001124:	4613      	mov	r3, r2
 8001126:	015b      	lsls	r3, r3, #5
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	4a08      	ldr	r2, [pc, #32]	; (8001150 <convert_ticks_to_percent_rh+0x38>)
 8001130:	fb82 1203 	smull	r1, r2, r2, r3
 8001134:	441a      	add	r2, r3
 8001136:	13d2      	asrs	r2, r2, #15
 8001138:	17db      	asrs	r3, r3, #31
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	b29b      	uxth	r3, r3
 800113e:	3b06      	subs	r3, #6
 8001140:	b29b      	uxth	r3, r3
 8001142:	b21b      	sxth	r3, r3
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	80008001 	.word	0x80008001

08001154 <sht4x_measure_ticks>:


static int16_t sht4x_measure_ticks(uint8_t precision, uint16_t* temperature_ticks, uint16_t* humidity_ticks){
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[RESPONSE_LENGHT];
	int8_t err;
	buffer[0] = precision;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	743b      	strb	r3, [r7, #16]
	err = sht4x_write(SHT4X_I2C_ADDRESS,buffer,1);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	2201      	movs	r2, #1
 800116c:	4619      	mov	r1, r3
 800116e:	2044      	movs	r0, #68	; 0x44
 8001170:	f000 f8e0 	bl	8001334 <sht4x_write>
 8001174:	4603      	mov	r3, r0
 8001176:	75fb      	strb	r3, [r7, #23]
	if (err < 0) {
 8001178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800117c:	2b00      	cmp	r3, #0
 800117e:	da06      	bge.n	800118e <sht4x_measure_ticks+0x3a>
		sht4x_print("Error en la escritura. \n");
 8001180:	4820      	ldr	r0, [pc, #128]	; (8001204 <sht4x_measure_ticks+0xb0>)
 8001182:	f000 f92c 	bl	80013de <sht4x_print>
		return err;
 8001186:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800118a:	b21b      	sxth	r3, r3
 800118c:	e035      	b.n	80011fa <sht4x_measure_ticks+0xa6>
	}
	sht4x_sleep(100);
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f000 f918 	bl	80013c4 <sht4x_sleep>

	err = sht4x_read(SHT4X_I2C_ADDRESS,buffer,sizeof(buffer));
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2206      	movs	r2, #6
 800119a:	4619      	mov	r1, r3
 800119c:	2044      	movs	r0, #68	; 0x44
 800119e:	f000 f8ed 	bl	800137c <sht4x_read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
	if (err < 0) {
 80011a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da06      	bge.n	80011bc <sht4x_measure_ticks+0x68>
		sht4x_print("Error en la lectura.\n");
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <sht4x_measure_ticks+0xb4>)
 80011b0:	f000 f915 	bl	80013de <sht4x_print>
		return err;
 80011b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	e01e      	b.n	80011fa <sht4x_measure_ticks+0xa6>
	//uint16_t temp = 0;
	//uint16_t checksum_temp = 0;
	//uint16_t hum = 0;
	//uint16_t checksum_hum = 0;

	*temperature_ticks = buffer_to_uint16_t(&buffer[0]);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff77 	bl	80010b4 <buffer_to_uint16_t>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	801a      	strh	r2, [r3, #0]
	//checksum_temp = buffer[2];
	*humidity_ticks = buffer_to_uint16_t(&buffer[3]);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	3303      	adds	r3, #3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff6d 	bl	80010b4 <buffer_to_uint16_t>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	801a      	strh	r2, [r3, #0]
	//checksum_hum = buffer[5];
	if(*temperature_ticks == 0 && *humidity_ticks == 0){
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <sht4x_measure_ticks+0xa4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <sht4x_measure_ticks+0xa4>
		return -1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f6:	e000      	b.n	80011fa <sht4x_measure_ticks+0xa6>
	}
	return 0;
 80011f8:	2300      	movs	r3, #0


}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	08004320 	.word	0x08004320
 8001208:	0800433c 	.word	0x0800433c

0800120c <sht4x_init>:

int8_t sht4x_init(void * i2c_init){
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	sht4x_init_port(i2c_init);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f87d 	bl	8001314 <sht4x_init_port>
	uint16_t serial_number_sht4x = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	81fb      	strh	r3, [r7, #14]
	if(sht4x_read_serial_number(&serial_number_sht4x)){
 800121e:	f107 030e 	add.w	r3, r7, #14
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f80e 	bl	8001244 <sht4x_read_serial_number>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <sht4x_init+0x2c>
		if(serial_number_sht4x!=0)
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <sht4x_init+0x2c>
			return 0;
 8001234:	2300      	movs	r3, #0
 8001236:	e001      	b.n	800123c <sht4x_init+0x30>
	}
	return -1;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <sht4x_read_serial_number>:


int8_t sht4x_read_serial_number(uint16_t * p_serial_number){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[RESPONSE_LENGHT];
	int8_t err;
	buffer[0] = SHT4X_SERIAL_NUMBER;
 800124c:	2389      	movs	r3, #137	; 0x89
 800124e:	723b      	strb	r3, [r7, #8]
	err = sht4x_write(SHT4X_I2C_ADDRESS,buffer,1);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2201      	movs	r2, #1
 8001256:	4619      	mov	r1, r3
 8001258:	2044      	movs	r0, #68	; 0x44
 800125a:	f000 f86b 	bl	8001334 <sht4x_write>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
	if (err < 0) {
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	2b00      	cmp	r3, #0
 8001268:	da02      	bge.n	8001270 <sht4x_read_serial_number+0x2c>
		return err;
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	e01d      	b.n	80012ac <sht4x_read_serial_number+0x68>
	}
	sht4x_sleep(100);
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f000 f8a7 	bl	80013c4 <sht4x_sleep>
	err = sht4x_read(SHT4X_I2C_ADDRESS,buffer,sizeof(buffer));
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2206      	movs	r2, #6
 800127c:	4619      	mov	r1, r3
 800127e:	2044      	movs	r0, #68	; 0x44
 8001280:	f000 f87c 	bl	800137c <sht4x_read>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]

	if (err < 0) {
 8001288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128c:	2b00      	cmp	r3, #0
 800128e:	da02      	bge.n	8001296 <sht4x_read_serial_number+0x52>
			return err;
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001294:	e00a      	b.n	80012ac <sht4x_read_serial_number+0x68>
	}
	*p_serial_number = buffer[0]*256 + buffer[1];
 8001296:	7a3b      	ldrb	r3, [r7, #8]
 8001298:	b29b      	uxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b29a      	uxth	r2, r3
 800129e:	7a7b      	ldrb	r3, [r7, #9]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	801a      	strh	r2, [r3, #0]
	return 0;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <sht4x_temp_hum_low_presition>:



int8_t sht4x_temp_hum_low_presition(uint16_t * temperature, uint16_t* humidity){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]

	uint16_t temp_ticks = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	81bb      	strh	r3, [r7, #12]
	uint16_t hum_ticks = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	817b      	strh	r3, [r7, #10]
	int8_t err = sht4x_measure_ticks(SHT4X_CMD_MEASURE_LPM, &temp_ticks, &hum_ticks);
 80012c6:	f107 020a 	add.w	r2, r7, #10
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	20e0      	movs	r0, #224	; 0xe0
 80012d2:	f7ff ff3f 	bl	8001154 <sht4x_measure_ticks>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]
	if(err<0){
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	da02      	bge.n	80012e8 <sht4x_temp_hum_low_presition+0x34>
		return err;
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	e010      	b.n	800130a <sht4x_temp_hum_low_presition+0x56>
	}
	*temperature = convert_ticks_to_celsius(temp_ticks);
 80012e8:	89bb      	ldrh	r3, [r7, #12]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fef8 	bl	80010e0 <convert_ticks_to_celsius>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	801a      	strh	r2, [r3, #0]
	*humidity = convert_ticks_to_percent_rh(hum_ticks);
 80012f8:	897b      	ldrh	r3, [r7, #10]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff0c 	bl	8001118 <convert_ticks_to_percent_rh>
 8001300:	4603      	mov	r3, r0
 8001302:	b29a      	uxth	r2, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	801a      	strh	r2, [r3, #0]

	return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <sht4x_init_port>:
  HAL_BUSY     = 0x02U,
  HAL_TIMEOUT  = 0x03U
 *
 *
 */
void sht4x_init_port(void* p_i2c){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	p_hi2c = (I2C_HandleTypeDef*)p_i2c;
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <sht4x_init_port+0x1c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200000c8 	.word	0x200000c8

08001334 <sht4x_write>:

int8_t sht4x_write(uint8_t address, uint8_t* data, uint16_t data_length){
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af02      	add	r7, sp, #8
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	80bb      	strh	r3, [r7, #4]

	  HAL_StatusTypeDef err = HAL_I2C_Master_Transmit (p_hi2c, (uint16_t)(address<<1), data, data_length,HAL_MAX_DELAY);
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <sht4x_write+0x44>)
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	b29b      	uxth	r3, r3
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	b299      	uxth	r1, r3
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001356:	9200      	str	r2, [sp, #0]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	f000 fe77 	bl	800204c <HAL_I2C_Master_Transmit>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
	  if(err == HAL_OK){
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <sht4x_write+0x38>
		  return 0;
 8001368:	2300      	movs	r3, #0
 800136a:	e001      	b.n	8001370 <sht4x_write+0x3c>
	  }else{
		  return -1;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	  }
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200000c8 	.word	0x200000c8

0800137c <sht4x_read>:

int8_t sht4x_read(uint8_t address, uint8_t* data, uint16_t data_length){
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af02      	add	r7, sp, #8
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef err = HAL_I2C_Master_Receive (p_hi2c, (uint16_t)(address<<1), data, data_length, HAL_MAX_DELAY);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <sht4x_read+0x44>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	b29b      	uxth	r3, r3
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	b299      	uxth	r1, r3
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800139e:	9200      	str	r2, [sp, #0]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	f000 ff51 	bl	8002248 <HAL_I2C_Master_Receive>
 80013a6:	4603      	mov	r3, r0
 80013a8:	73fb      	strb	r3, [r7, #15]
	  if(err == HAL_OK){
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <sht4x_read+0x38>
			  return 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e001      	b.n	80013b8 <sht4x_read+0x3c>
		  }else{
			  return -1;
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		  }
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200000c8 	.word	0x200000c8

080013c4 <sht4x_sleep>:

void sht4x_sleep(uint16_t time_delay){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_delay);
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f9fd 	bl	80017d0 <HAL_Delay>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <sht4x_print>:

void sht4x_print(uint8_t* data){
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]

}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <buffer_to_uint16_t>:
void sunrise_print();

void sunrise_init_port(void* p_i2c);


static uint16_t buffer_to_uint16_t(const uint8_t* bytes) {
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3301      	adds	r3, #1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21b      	sxth	r3, r3
 800140e:	b29b      	uxth	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <sunrise_init>:


int8_t sunrise_init(void * i2c_init){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	sunrise_init_port(i2c_init);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f843 	bl	80014b0 <sunrise_init_port>
	return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <sunrise_read_co2>:

int8_t sunrise_read_co2(uint16_t * co2){
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[8];
	int8_t err;
	buffer[0] = 0x00;
 800143c:	2300      	movs	r3, #0
 800143e:	733b      	strb	r3, [r7, #12]

	err = sunrise_write(SUNRISE_I2C_ADDRESS,buffer,0);
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	2068      	movs	r0, #104	; 0x68
 800144a:	f000 f841 	bl	80014d0 <sunrise_write>
 800144e:	4603      	mov	r3, r0
 8001450:	75fb      	strb	r3, [r7, #23]

	err = sunrise_write(SUNRISE_I2C_ADDRESS,buffer,1);
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2201      	movs	r2, #1
 8001458:	4619      	mov	r1, r3
 800145a:	2068      	movs	r0, #104	; 0x68
 800145c:	f000 f838 	bl	80014d0 <sunrise_write>
 8001460:	4603      	mov	r3, r0
 8001462:	75fb      	strb	r3, [r7, #23]
	if (err < 0) {
 8001464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001468:	2b00      	cmp	r3, #0
 800146a:	da02      	bge.n	8001472 <sunrise_read_co2+0x3e>
		return err;
 800146c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001470:	e01a      	b.n	80014a8 <sunrise_read_co2+0x74>
	}
	err = sunrise_read(SUNRISE_I2C_ADDRESS,buffer,sizeof(buffer));
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2208      	movs	r2, #8
 8001478:	4619      	mov	r1, r3
 800147a:	2068      	movs	r0, #104	; 0x68
 800147c:	f000 f84a 	bl	8001514 <sunrise_read>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
	if (err < 0) {
 8001484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da02      	bge.n	8001492 <sunrise_read_co2+0x5e>
			return err;
 800148c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001490:	e00a      	b.n	80014a8 <sunrise_read_co2+0x74>
	}
	*co2 = buffer_to_uint16_t(&buffer[6]);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	3306      	adds	r3, #6
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ffaa 	bl	80013f2 <buffer_to_uint16_t>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	801a      	strh	r2, [r3, #0]
	return 0;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <sunrise_init_port>:
  HAL_BUSY     = 0x02U,
  HAL_TIMEOUT  = 0x03U
 *
 *
 */
void sunrise_init_port(void* p_i2c){
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	p_hi2c_sunrise = (I2C_HandleTypeDef*)p_i2c;
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <sunrise_init_port+0x1c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200000cc 	.word	0x200000cc

080014d0 <sunrise_write>:

int8_t sunrise_write(uint16_t address, uint8_t* data, uint16_t data_length){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	80fb      	strh	r3, [r7, #6]
 80014dc:	4613      	mov	r3, r2
 80014de:	80bb      	strh	r3, [r7, #4]

	  HAL_StatusTypeDef err = HAL_I2C_Master_Transmit (p_hi2c_sunrise, (uint16_t)(address<<1), data, data_length,15);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <sunrise_write+0x40>)
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	b299      	uxth	r1, r3
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	220f      	movs	r2, #15
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	f000 fdab 	bl	800204c <HAL_I2C_Master_Transmit>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
	  if(err == HAL_OK){
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <sunrise_write+0x34>
		  return 0;
 8001500:	2300      	movs	r3, #0
 8001502:	e001      	b.n	8001508 <sunrise_write+0x38>
	  }else{
		  return -1;
 8001504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	  }
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000cc 	.word	0x200000cc

08001514 <sunrise_read>:

int8_t sunrise_read(uint16_t address, uint8_t* data, uint16_t data_length){
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af02      	add	r7, sp, #8
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	4613      	mov	r3, r2
 8001522:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef err = HAL_I2C_Master_Receive(p_hi2c_sunrise, (uint16_t)(address<<1), data, data_length, 15);
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <sunrise_read+0x40>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b299      	uxth	r1, r3
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	220f      	movs	r2, #15
 8001532:	9200      	str	r2, [sp, #0]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	f000 fe87 	bl	8002248 <HAL_I2C_Master_Receive>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
	  if(err == HAL_OK){
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <sunrise_read+0x34>
			  return 0;
 8001544:	2300      	movs	r3, #0
 8001546:	e001      	b.n	800154c <sunrise_read+0x38>
		  }else{
			  return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		  }
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200000cc 	.word	0x200000cc

08001558 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	4613      	mov	r3, r2
 8001566:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <BSP_PB_Init+0xa4>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a22      	ldr	r2, [pc, #136]	; (80015fc <BSP_PB_Init+0xa4>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <BSP_PB_Init+0xa4>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d112      	bne.n	80015b0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <BSP_PB_Init+0xa8>)
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	f107 020c 	add.w	r2, r7, #12
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fa46 	bl	8001a3c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d11d      	bne.n	80015f2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80015b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80015c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <BSP_PB_Init+0xa8>)
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	f107 020c 	add.w	r2, r7, #12
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fa31 	bl	8001a3c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80015da:	2328      	movs	r3, #40	; 0x28
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	210f      	movs	r1, #15
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f9f3 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80015e8:	2328      	movs	r3, #40	; 0x28
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fa0a 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	20000024 	.word	0x20000024

08001604 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <BSP_PB_GetState+0x28>)
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fbb9 	bl	8001d94 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000024 	.word	0x20000024

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <SystemInit+0x60>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <SystemInit+0x60>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <SystemInit+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <SystemInit+0x64>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <SystemInit+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <SystemInit+0x64>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <SystemInit+0x64>)
 800165c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <SystemInit+0x64>)
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <SystemInit+0x68>)
 800166a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <SystemInit+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a08      	ldr	r2, [pc, #32]	; (8001694 <SystemInit+0x64>)
 8001672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001676:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SystemInit+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SystemInit+0x60>)
 8001680:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001684:	609a      	str	r2, [r3, #8]
#endif
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00
 8001694:	40023800 	.word	0x40023800
 8001698:	24003010 	.word	0x24003010

0800169c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80016f0:	f000 f84e 	bl	8001790 <HAL_IncTick>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_Init+0x34>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_Init+0x34>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001706:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_Init+0x34>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_Init+0x34>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f94f 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	200f      	movs	r0, #15
 800171c:	f000 f808 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f001 fbb2 	bl	8002e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x54>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x58>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	fbb3 f3f1 	udiv	r3, r3, r1
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f967 	bl	8001a22 <HAL_SYSTICK_Config>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00e      	b.n	800177c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d80a      	bhi.n	800177a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800176c:	f000 f92f 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <HAL_InitTick+0x5c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000028 	.word	0x20000028
 8001788:	20000030 	.word	0x20000030
 800178c:	2000002c 	.word	0x2000002c

08001790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x24>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_IncTick+0x24>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000030 	.word	0x20000030
 80017b4:	200000d0 	.word	0x200000d0

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200000d0 	.word	0x200000d0

080017d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff ffee 	bl	80017b8 <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e8:	d005      	beq.n	80017f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_Delay+0x44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f6:	bf00      	nop
 80017f8:	f7ff ffde 	bl	80017b8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d8f7      	bhi.n	80017f8 <HAL_Delay+0x28>
  {
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000030 	.word	0x20000030

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e177      	b.n	8001d48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8166 	bne.w	8001d42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80c0 	beq.w	8001d42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_GPIO_Init+0x324>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a61      	ldr	r2, [pc, #388]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_GPIO_Init+0x32c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d037      	beq.n	8001c7a <HAL_GPIO_Init+0x23e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <HAL_GPIO_Init+0x330>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d031      	beq.n	8001c76 <HAL_GPIO_Init+0x23a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a56      	ldr	r2, [pc, #344]	; (8001d70 <HAL_GPIO_Init+0x334>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d02b      	beq.n	8001c72 <HAL_GPIO_Init+0x236>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a55      	ldr	r2, [pc, #340]	; (8001d74 <HAL_GPIO_Init+0x338>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d025      	beq.n	8001c6e <HAL_GPIO_Init+0x232>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a54      	ldr	r2, [pc, #336]	; (8001d78 <HAL_GPIO_Init+0x33c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <HAL_GPIO_Init+0x22e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a53      	ldr	r2, [pc, #332]	; (8001d7c <HAL_GPIO_Init+0x340>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x22a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a52      	ldr	r2, [pc, #328]	; (8001d80 <HAL_GPIO_Init+0x344>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_GPIO_Init+0x348>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x222>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a50      	ldr	r2, [pc, #320]	; (8001d88 <HAL_GPIO_Init+0x34c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x21e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <HAL_GPIO_Init+0x350>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c52:	2309      	movs	r3, #9
 8001c54:	e012      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c56:	230a      	movs	r3, #10
 8001c58:	e010      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	e00e      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c5e:	2307      	movs	r3, #7
 8001c60:	e00c      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e00a      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x240>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_GPIO_Init+0x328>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbe:	4a34      	ldr	r2, [pc, #208]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce8:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_GPIO_Init+0x354>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f ae84 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40021c00 	.word	0x40021c00
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40022400 	.word	0x40022400
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e12b      	b.n	800202e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f002 f97e 	bl	80040ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e28:	f001 fca6 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4a81      	ldr	r2, [pc, #516]	; (8002038 <HAL_I2C_Init+0x274>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d807      	bhi.n	8001e48 <HAL_I2C_Init+0x84>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a80      	ldr	r2, [pc, #512]	; (800203c <HAL_I2C_Init+0x278>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e006      	b.n	8001e56 <HAL_I2C_Init+0x92>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a7d      	ldr	r2, [pc, #500]	; (8002040 <HAL_I2C_Init+0x27c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0e7      	b.n	800202e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4a78      	ldr	r2, [pc, #480]	; (8002044 <HAL_I2C_Init+0x280>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0c9b      	lsrs	r3, r3, #18
 8001e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <HAL_I2C_Init+0x274>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d802      	bhi.n	8001e98 <HAL_I2C_Init+0xd4>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3301      	adds	r3, #1
 8001e96:	e009      	b.n	8001eac <HAL_I2C_Init+0xe8>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	4a69      	ldr	r2, [pc, #420]	; (8002048 <HAL_I2C_Init+0x284>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	3301      	adds	r3, #1
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	495c      	ldr	r1, [pc, #368]	; (8002038 <HAL_I2C_Init+0x274>)
 8001ec8:	428b      	cmp	r3, r1
 8001eca:	d819      	bhi.n	8001f00 <HAL_I2C_Init+0x13c>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e59      	subs	r1, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ee0:	400b      	ands	r3, r1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_I2C_Init+0x138>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e59      	subs	r1, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efa:	e051      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e04f      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d111      	bne.n	8001f2c <HAL_I2C_Init+0x168>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	e012      	b.n	8001f52 <HAL_I2C_Init+0x18e>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1e58      	subs	r0, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	0099      	lsls	r1, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Init+0x196>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e022      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10e      	bne.n	8001f80 <HAL_I2C_Init+0x1bc>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e58      	subs	r0, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	440b      	add	r3, r1
 8001f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	e00f      	b.n	8001fa0 <HAL_I2C_Init+0x1dc>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	0099      	lsls	r1, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	6809      	ldr	r1, [r1, #0]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6911      	ldr	r1, [r2, #16]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68d2      	ldr	r2, [r2, #12]
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	000186a0 	.word	0x000186a0
 800203c:	001e847f 	.word	0x001e847f
 8002040:	003d08ff 	.word	0x003d08ff
 8002044:	431bde83 	.word	0x431bde83
 8002048:	10624dd3 	.word	0x10624dd3

0800204c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	460b      	mov	r3, r1
 800205a:	817b      	strh	r3, [r7, #10]
 800205c:	4613      	mov	r3, r2
 800205e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fbaa 	bl	80017b8 <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	f040 80e0 	bne.w	8002234 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2319      	movs	r3, #25
 800207a:	2201      	movs	r2, #1
 800207c:	4970      	ldr	r1, [pc, #448]	; (8002240 <HAL_I2C_Master_Transmit+0x1f4>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fc58 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	e0d3      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_I2C_Master_Transmit+0x50>
 8002098:	2302      	movs	r3, #2
 800209a:	e0cc      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d007      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2221      	movs	r2, #33	; 0x21
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2210      	movs	r2, #16
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	893a      	ldrh	r2, [r7, #8]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a50      	ldr	r2, [pc, #320]	; (8002244 <HAL_I2C_Master_Transmit+0x1f8>)
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002104:	8979      	ldrh	r1, [r7, #10]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fac2 	bl	8002694 <I2C_MasterRequestWrite>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e08d      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002130:	e066      	b.n	8002200 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	6a39      	ldr	r1, [r7, #32]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fcd2 	bl	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2b04      	cmp	r3, #4
 8002148:	d107      	bne.n	800215a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002158:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06b      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d11b      	bne.n	80021d4 <HAL_I2C_Master_Transmit+0x188>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d017      	beq.n	80021d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	6a39      	ldr	r1, [r7, #32]
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fcc2 	bl	8002b62 <I2C_WaitOnBTFFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d107      	bne.n	80021fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e01a      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d194      	bne.n	8002132 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	e000      	b.n	8002236 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002234:	2302      	movs	r3, #2
  }
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	00100002 	.word	0x00100002
 8002244:	ffff0000 	.word	0xffff0000

08002248 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	461a      	mov	r2, r3
 8002254:	460b      	mov	r3, r1
 8002256:	817b      	strh	r3, [r7, #10]
 8002258:	4613      	mov	r3, r2
 800225a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff faac 	bl	80017b8 <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	f040 820b 	bne.w	8002686 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2319      	movs	r3, #25
 8002276:	2201      	movs	r2, #1
 8002278:	497c      	ldr	r1, [pc, #496]	; (800246c <HAL_I2C_Master_Receive+0x224>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fb5a 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	e1fe      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_I2C_Master_Receive+0x50>
 8002294:	2302      	movs	r3, #2
 8002296:	e1f7      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d007      	beq.n	80022be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2222      	movs	r2, #34	; 0x22
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a5c      	ldr	r2, [pc, #368]	; (8002470 <HAL_I2C_Master_Receive+0x228>)
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fa46 	bl	8002798 <I2C_MasterRequestRead>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1b8      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d113      	bne.n	8002346 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	623b      	str	r3, [r7, #32]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	623b      	str	r3, [r7, #32]
 8002332:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e18c      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	2b01      	cmp	r3, #1
 800234c:	d11b      	bne.n	8002386 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e16c      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	2b02      	cmp	r3, #2
 800238c:	d11b      	bne.n	80023c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	e14c      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023ec:	e138      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	f200 80f1 	bhi.w	80025da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d123      	bne.n	8002448 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fbed 	bl	8002be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e139      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002446:	e10b      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	2b02      	cmp	r3, #2
 800244e:	d14e      	bne.n	80024ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	2200      	movs	r2, #0
 8002458:	4906      	ldr	r1, [pc, #24]	; (8002474 <HAL_I2C_Master_Receive+0x22c>)
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa6a 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e10e      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
 800246a:	bf00      	nop
 800246c:	00100002 	.word	0x00100002
 8002470:	ffff0000 	.word	0xffff0000
 8002474:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ec:	e0b8      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	2200      	movs	r2, #0
 80024f6:	4966      	ldr	r1, [pc, #408]	; (8002690 <HAL_I2C_Master_Receive+0x448>)
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fa1b 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0bf      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	2200      	movs	r2, #0
 8002552:	494f      	ldr	r1, [pc, #316]	; (8002690 <HAL_I2C_Master_Receive+0x448>)
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f9ed 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e091      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025d8:	e042      	b.n	8002660 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fb00 	bl	8002be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e04c      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d118      	bne.n	8002660 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	f47f aec2 	bne.w	80023ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3728      	adds	r7, #40	; 0x28
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	00010004 	.word	0x00010004

08002694 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	460b      	mov	r3, r1
 80026a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d006      	beq.n	80026be <I2C_MasterRequestWrite+0x2a>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d003      	beq.n	80026be <I2C_MasterRequestWrite+0x2a>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026bc:	d108      	bne.n	80026d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e00b      	b.n	80026e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	d107      	bne.n	80026e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f91d 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270e:	d103      	bne.n	8002718 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e035      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002724:	d108      	bne.n	8002738 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002734:	611a      	str	r2, [r3, #16]
 8002736:	e01b      	b.n	8002770 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002738:	897b      	ldrh	r3, [r7, #10]
 800273a:	11db      	asrs	r3, r3, #7
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f003 0306 	and.w	r3, r3, #6
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f063 030f 	orn	r3, r3, #15
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	490e      	ldr	r1, [pc, #56]	; (8002790 <I2C_MasterRequestWrite+0xfc>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f943 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e010      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002766:	897b      	ldrh	r3, [r7, #10]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <I2C_MasterRequestWrite+0x100>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f933 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	00010008 	.word	0x00010008
 8002794:	00010002 	.word	0x00010002

08002798 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	460b      	mov	r3, r1
 80027a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d006      	beq.n	80027d2 <I2C_MasterRequestRead+0x3a>
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d003      	beq.n	80027d2 <I2C_MasterRequestRead+0x3a>
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d0:	d108      	bne.n	80027e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e00b      	b.n	80027fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	2b11      	cmp	r3, #17
 80027ea:	d107      	bne.n	80027fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f893 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002822:	d103      	bne.n	800282c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e079      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002838:	d108      	bne.n	800284c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	e05f      	b.n	800290c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800284c:	897b      	ldrh	r3, [r7, #10]
 800284e:	11db      	asrs	r3, r3, #7
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0306 	and.w	r3, r3, #6
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f063 030f 	orn	r3, r3, #15
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4930      	ldr	r1, [pc, #192]	; (800292c <I2C_MasterRequestRead+0x194>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f8b9 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e054      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800287a:	897b      	ldrh	r3, [r7, #10]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4929      	ldr	r1, [pc, #164]	; (8002930 <I2C_MasterRequestRead+0x198>)
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f8a9 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e044      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f831 	bl	8002934 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e6:	d103      	bne.n	80028f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e017      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028f4:	897b      	ldrh	r3, [r7, #10]
 80028f6:	11db      	asrs	r3, r3, #7
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0306 	and.w	r3, r3, #6
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f063 030e 	orn	r3, r3, #14
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <I2C_MasterRequestRead+0x198>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f865 	bl	80029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	00010008 	.word	0x00010008
 8002930:	00010002 	.word	0x00010002

08002934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002944:	e025      	b.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800294c:	d021      	beq.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7fe ff33 	bl	80017b8 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d116      	bne.n	8002992 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e023      	b.n	80029da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10d      	bne.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	e00c      	b.n	80029d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d0b6      	beq.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f0:	e051      	b.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d123      	bne.n	8002a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e046      	b.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a50:	d021      	beq.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7fe feb1 	bl	80017b8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d116      	bne.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e020      	b.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10c      	bne.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e00b      	b.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d18d      	bne.n	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aec:	e02d      	b.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f8ce 	bl	8002c90 <I2C_IsAcknowledgeFailed>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e02d      	b.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b04:	d021      	beq.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe fe57 	bl	80017b8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d116      	bne.n	8002b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e007      	b.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	2b80      	cmp	r3, #128	; 0x80
 8002b56:	d1ca      	bne.n	8002aee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b6e:	e02d      	b.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 f88d 	bl	8002c90 <I2C_IsAcknowledgeFailed>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e02d      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b86:	d021      	beq.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fe fe16 	bl	80017b8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e007      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d1ca      	bne.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf0:	e042      	b.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d119      	bne.n	8002c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0210 	mvn.w	r2, #16
 8002c08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e029      	b.n	8002c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c34:	f7fe fdc0 	bl	80017b8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d1b5      	bne.n	8002bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d11b      	bne.n	8002ce0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d129      	bne.n	8002d58 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	; 0x24
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0210 	bic.w	r2, r2, #16
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d12a      	bne.n	8002dd6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	; 0x24
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002da0:	89fb      	ldrh	r3, [r7, #14]
 8002da2:	f023 030f 	bic.w	r3, r3, #15
 8002da6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	89fb      	ldrh	r3, [r7, #14]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	89fa      	ldrh	r2, [r7, #14]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002e12:	f043 0308 	orr.w	r3, r3, #8
 8002e16:	6313      	str	r3, [r2, #48]	; 0x30
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e32:	6413      	str	r3, [r2, #64]	; 0x40
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_UART_MspInit+0x9c>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002e52:	2307      	movs	r3, #7
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4809      	ldr	r0, [pc, #36]	; (8002e84 <HAL_UART_MspInit+0xa0>)
 8002e5e:	f7fe fded 	bl	8001a3c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002e68:	2307      	movs	r3, #7
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	4804      	ldr	r0, [pc, #16]	; (8002e84 <HAL_UART_MspInit+0xa0>)
 8002e74:	f7fe fde2 	bl	8001a3c <HAL_GPIO_Init>
}
 8002e78:	bf00      	nop
 8002e7a:	3728      	adds	r7, #40	; 0x28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020c00 	.word	0x40020c00

08002e88 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0

}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e267      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d075      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb6:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d00c      	beq.n	8002edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec2:	4b85      	ldr	r3, [pc, #532]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d112      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ece:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eda:	d10b      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	4b7e      	ldr	r3, [pc, #504]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05b      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x108>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d157      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e242      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d106      	bne.n	8002f0c <HAL_RCC_OscConfig+0x74>
 8002efe:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e01d      	b.n	8002f48 <HAL_RCC_OscConfig+0xb0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x98>
 8002f16:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a6f      	ldr	r2, [pc, #444]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b6d      	ldr	r3, [pc, #436]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6c      	ldr	r2, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0xb0>
 8002f30:	4b69      	ldr	r3, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a68      	ldr	r2, [pc, #416]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a65      	ldr	r2, [pc, #404]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc32 	bl	80017b8 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fc2e 	bl	80017b8 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e207      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0xc0>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fc1e 	bl	80017b8 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fc1a 	bl	80017b8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1f3      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0xe8>
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d063      	beq.n	8003076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d11c      	bne.n	8003000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc6:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d116      	bne.n	8003000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_RCC_OscConfig+0x152>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1c7      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4937      	ldr	r1, [pc, #220]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	e03a      	b.n	8003076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d020      	beq.n	800304a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003008:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HAL_RCC_OscConfig+0x244>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fbd3 	bl	80017b8 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe fbcf 	bl	80017b8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1a8      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003034:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4925      	ldr	r1, [pc, #148]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
 8003048:	e015      	b.n	8003076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCC_OscConfig+0x244>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fbb2 	bl	80017b8 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003058:	f7fe fbae 	bl	80017b8 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e187      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d036      	beq.n	80030f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_RCC_OscConfig+0x248>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fb92 	bl	80017b8 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe fb8e 	bl	80017b8 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e167      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_OscConfig+0x240>)
 80030ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x200>
 80030b6:	e01b      	b.n	80030f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_OscConfig+0x248>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fb7b 	bl	80017b8 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	e00e      	b.n	80030e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe fb77 	bl	80017b8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d907      	bls.n	80030e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e150      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	42470000 	.word	0x42470000
 80030e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4b88      	ldr	r3, [pc, #544]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80030e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ea      	bne.n	80030c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8097 	beq.w	800322c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b81      	ldr	r3, [pc, #516]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	4b7d      	ldr	r3, [pc, #500]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a7c      	ldr	r2, [pc, #496]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b7a      	ldr	r3, [pc, #488]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b77      	ldr	r3, [pc, #476]	; (800330c <HAL_RCC_OscConfig+0x474>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b74      	ldr	r3, [pc, #464]	; (800330c <HAL_RCC_OscConfig+0x474>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a73      	ldr	r2, [pc, #460]	; (800330c <HAL_RCC_OscConfig+0x474>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fe fb37 	bl	80017b8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fb33 	bl	80017b8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e10c      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_OscConfig+0x474>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x2ea>
 8003174:	4b64      	ldr	r3, [pc, #400]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a63      	ldr	r2, [pc, #396]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
 8003180:	e01c      	b.n	80031bc <HAL_RCC_OscConfig+0x324>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b05      	cmp	r3, #5
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x30c>
 800318a:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a5e      	ldr	r2, [pc, #376]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	4b5c      	ldr	r3, [pc, #368]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a5b      	ldr	r2, [pc, #364]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0x324>
 80031a4:	4b58      	ldr	r3, [pc, #352]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a57      	ldr	r2, [pc, #348]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	4b55      	ldr	r3, [pc, #340]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a54      	ldr	r2, [pc, #336]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031b6:	f023 0304 	bic.w	r3, r3, #4
 80031ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d015      	beq.n	80031f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe faf8 	bl	80017b8 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe faf4 	bl	80017b8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0cb      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	4b49      	ldr	r3, [pc, #292]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ee      	beq.n	80031cc <HAL_RCC_OscConfig+0x334>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fae2 	bl	80017b8 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe fade 	bl	80017b8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0b5      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320e:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ee      	bne.n	80031f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003220:	4b39      	ldr	r3, [pc, #228]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	4a38      	ldr	r2, [pc, #224]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a1 	beq.w	8003378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003236:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b08      	cmp	r3, #8
 8003240:	d05c      	beq.n	80032fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d141      	bne.n	80032ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_OscConfig+0x478>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe fab2 	bl	80017b8 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe faae 	bl	80017b8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e087      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	491b      	ldr	r1, [pc, #108]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x478>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe fa87 	bl	80017b8 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fe fa83 	bl	80017b8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e05c      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x416>
 80032cc:	e054      	b.n	8003378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCC_OscConfig+0x478>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fe fa70 	bl	80017b8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe fa6c 	bl	80017b8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e045      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCC_OscConfig+0x470>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x444>
 80032fa:	e03d      	b.n	8003378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e038      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
 8003308:	40023800 	.word	0x40023800
 800330c:	40007000 	.word	0x40007000
 8003310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x4ec>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d028      	beq.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d121      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d11a      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800334a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800

08003388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0cc      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b68      	ldr	r3, [pc, #416]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d90c      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d044      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d119      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d003      	beq.n	8003446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003442:	2b03      	cmp	r3, #3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e067      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b37      	ldr	r3, [pc, #220]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4934      	ldr	r1, [pc, #208]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fe f99e 	bl	80017b8 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe f99a 	bl	80017b8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e04f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d20c      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4916      	ldr	r1, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	490e      	ldr	r1, [pc, #56]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800350e:	f000 f821 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003512:	4602      	mov	r2, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	490a      	ldr	r1, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
 8003522:	fa22 f303 	lsr.w	r3, r2, r3
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe f8fe 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023c00 	.word	0x40023c00
 8003544:	40023800 	.word	0x40023800
 8003548:	08004354 	.word	0x08004354
 800354c:	20000028 	.word	0x20000028
 8003550:	2000002c 	.word	0x2000002c

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b094      	sub	sp, #80	; 0x50
 800355a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	647b      	str	r3, [r7, #68]	; 0x44
 8003560:	2300      	movs	r3, #0
 8003562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003564:	2300      	movs	r3, #0
 8003566:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356c:	4b79      	ldr	r3, [pc, #484]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d00d      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x40>
 8003578:	2b08      	cmp	r3, #8
 800357a:	f200 80e1 	bhi.w	8003740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x34>
 8003582:	2b04      	cmp	r3, #4
 8003584:	d003      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x3a>
 8003586:	e0db      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b73      	ldr	r3, [pc, #460]	; (8003758 <HAL_RCC_GetSysClockFreq+0x204>)
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800358c:	e0db      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800358e:	4b73      	ldr	r3, [pc, #460]	; (800375c <HAL_RCC_GetSysClockFreq+0x208>)
 8003590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003592:	e0d8      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800359e:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d063      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035aa:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	2200      	movs	r2, #0
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
 80035be:	2300      	movs	r3, #0
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
 80035c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035c6:	4622      	mov	r2, r4
 80035c8:	462b      	mov	r3, r5
 80035ca:	f04f 0000 	mov.w	r0, #0
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	0159      	lsls	r1, r3, #5
 80035d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d8:	0150      	lsls	r0, r2, #5
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4621      	mov	r1, r4
 80035e0:	1a51      	subs	r1, r2, r1
 80035e2:	6139      	str	r1, [r7, #16]
 80035e4:	4629      	mov	r1, r5
 80035e6:	eb63 0301 	sbc.w	r3, r3, r1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f8:	4659      	mov	r1, fp
 80035fa:	018b      	lsls	r3, r1, #6
 80035fc:	4651      	mov	r1, sl
 80035fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003602:	4651      	mov	r1, sl
 8003604:	018a      	lsls	r2, r1, #6
 8003606:	4651      	mov	r1, sl
 8003608:	ebb2 0801 	subs.w	r8, r2, r1
 800360c:	4659      	mov	r1, fp
 800360e:	eb63 0901 	sbc.w	r9, r3, r1
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800361e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003626:	4690      	mov	r8, r2
 8003628:	4699      	mov	r9, r3
 800362a:	4623      	mov	r3, r4
 800362c:	eb18 0303 	adds.w	r3, r8, r3
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	462b      	mov	r3, r5
 8003634:	eb49 0303 	adc.w	r3, r9, r3
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003646:	4629      	mov	r1, r5
 8003648:	024b      	lsls	r3, r1, #9
 800364a:	4621      	mov	r1, r4
 800364c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003650:	4621      	mov	r1, r4
 8003652:	024a      	lsls	r2, r1, #9
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365a:	2200      	movs	r2, #0
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
 800365e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003664:	f7fd f8d2 	bl	800080c <__aeabi_uldivmod>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4613      	mov	r3, r2
 800366e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003670:	e058      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	099b      	lsrs	r3, r3, #6
 8003678:	2200      	movs	r2, #0
 800367a:	4618      	mov	r0, r3
 800367c:	4611      	mov	r1, r2
 800367e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800368c:	4642      	mov	r2, r8
 800368e:	464b      	mov	r3, r9
 8003690:	f04f 0000 	mov.w	r0, #0
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	0159      	lsls	r1, r3, #5
 800369a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369e:	0150      	lsls	r0, r2, #5
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4641      	mov	r1, r8
 80036a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036aa:	4649      	mov	r1, r9
 80036ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036c4:	ebb2 040a 	subs.w	r4, r2, sl
 80036c8:	eb63 050b 	sbc.w	r5, r3, fp
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	464b      	mov	r3, r9
 80036e8:	eb45 0303 	adc.w	r3, r5, r3
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036fa:	4629      	mov	r1, r5
 80036fc:	028b      	lsls	r3, r1, #10
 80036fe:	4621      	mov	r1, r4
 8003700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003704:	4621      	mov	r1, r4
 8003706:	028a      	lsls	r2, r1, #10
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	2200      	movs	r2, #0
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	61fa      	str	r2, [r7, #28]
 8003714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003718:	f7fd f878 	bl	800080c <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4613      	mov	r3, r2
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_GetSysClockFreq+0x200>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	0c1b      	lsrs	r3, r3, #16
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	3301      	adds	r3, #1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800373e:	e002      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCC_GetSysClockFreq+0x204>)
 8003742:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003748:	4618      	mov	r0, r3
 800374a:	3750      	adds	r7, #80	; 0x50
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	00f42400 	.word	0x00f42400
 800375c:	007a1200 	.word	0x007a1200

08003760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_RCC_GetHCLKFreq+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000028 	.word	0x20000028

08003778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800377c:	f7ff fff0 	bl	8003760 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0a9b      	lsrs	r3, r3, #10
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <HAL_RCC_GetPCLK1Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	08004364 	.word	0x08004364

080037a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037a4:	f7ff ffdc 	bl	8003760 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	0b5b      	lsrs	r3, r3, #13
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	08004364 	.word	0x08004364

080037c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e03f      	b.n	800385a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff faf8 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800380a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f929 	bl	8003a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b08a      	sub	sp, #40	; 0x28
 8003866:	af02      	add	r7, sp, #8
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	4613      	mov	r3, r2
 8003870:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b20      	cmp	r3, #32
 8003880:	d17c      	bne.n	800397c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_UART_Transmit+0x2c>
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e075      	b.n	800397e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_UART_Transmit+0x3e>
 800389c:	2302      	movs	r3, #2
 800389e:	e06e      	b.n	800397e <HAL_UART_Transmit+0x11c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2221      	movs	r2, #33	; 0x21
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b6:	f7fd ff7f 	bl	80017b8 <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	88fa      	ldrh	r2, [r7, #6]
 80038c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d0:	d108      	bne.n	80038e4 <HAL_UART_Transmit+0x82>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e003      	b.n	80038ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038f4:	e02a      	b.n	800394c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	2180      	movs	r1, #128	; 0x80
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f840 	bl	8003986 <UART_WaitOnFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e036      	b.n	800397e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3302      	adds	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	e007      	b.n	800393e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1cf      	bne.n	80038f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	2140      	movs	r1, #64	; 0x40
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f810 	bl	8003986 <UART_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e006      	b.n	800397e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b090      	sub	sp, #64	; 0x40
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003996:	e050      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399e:	d04c      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80039a6:	f7fd ff07 	bl	80017b8 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d241      	bcs.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039d6:	637a      	str	r2, [r7, #52]	; 0x34
 80039d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e5      	bne.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	613b      	str	r3, [r7, #16]
   return(result);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a0a:	623a      	str	r2, [r7, #32]
 8003a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e00f      	b.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d09f      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3740      	adds	r7, #64	; 0x40
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a68:	b0c0      	sub	sp, #256	; 0x100
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	68d9      	ldr	r1, [r3, #12]
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	ea40 0301 	orr.w	r3, r0, r1
 8003a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003abc:	f021 010c 	bic.w	r1, r1, #12
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003aca:	430b      	orrs	r3, r1
 8003acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	6999      	ldr	r1, [r3, #24]
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	ea40 0301 	orr.w	r3, r0, r1
 8003aea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	4b8f      	ldr	r3, [pc, #572]	; (8003d30 <UART_SetConfig+0x2cc>)
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d005      	beq.n	8003b04 <UART_SetConfig+0xa0>
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b8d      	ldr	r3, [pc, #564]	; (8003d34 <UART_SetConfig+0x2d0>)
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d104      	bne.n	8003b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b04:	f7ff fe4c 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 8003b08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b0c:	e003      	b.n	8003b16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b0e:	f7ff fe33 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8003b12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	f040 810c 	bne.w	8003d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b36:	4622      	mov	r2, r4
 8003b38:	462b      	mov	r3, r5
 8003b3a:	1891      	adds	r1, r2, r2
 8003b3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b3e:	415b      	adcs	r3, r3
 8003b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b46:	4621      	mov	r1, r4
 8003b48:	eb12 0801 	adds.w	r8, r2, r1
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	eb43 0901 	adc.w	r9, r3, r1
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b66:	4690      	mov	r8, r2
 8003b68:	4699      	mov	r9, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	eb18 0303 	adds.w	r3, r8, r3
 8003b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b74:	462b      	mov	r3, r5
 8003b76:	eb49 0303 	adc.w	r3, r9, r3
 8003b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b92:	460b      	mov	r3, r1
 8003b94:	18db      	adds	r3, r3, r3
 8003b96:	653b      	str	r3, [r7, #80]	; 0x50
 8003b98:	4613      	mov	r3, r2
 8003b9a:	eb42 0303 	adc.w	r3, r2, r3
 8003b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ba8:	f7fc fe30 	bl	800080c <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4b61      	ldr	r3, [pc, #388]	; (8003d38 <UART_SetConfig+0x2d4>)
 8003bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	011c      	lsls	r4, r3, #4
 8003bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bcc:	4642      	mov	r2, r8
 8003bce:	464b      	mov	r3, r9
 8003bd0:	1891      	adds	r1, r2, r2
 8003bd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bd4:	415b      	adcs	r3, r3
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bdc:	4641      	mov	r1, r8
 8003bde:	eb12 0a01 	adds.w	sl, r2, r1
 8003be2:	4649      	mov	r1, r9
 8003be4:	eb43 0b01 	adc.w	fp, r3, r1
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bfc:	4692      	mov	sl, r2
 8003bfe:	469b      	mov	fp, r3
 8003c00:	4643      	mov	r3, r8
 8003c02:	eb1a 0303 	adds.w	r3, sl, r3
 8003c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	18db      	adds	r3, r3, r3
 8003c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c2e:	4613      	mov	r3, r2
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	647b      	str	r3, [r7, #68]	; 0x44
 8003c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c3e:	f7fc fde5 	bl	800080c <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <UART_SetConfig+0x2d4>)
 8003c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2264      	movs	r2, #100	; 0x64
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	1acb      	subs	r3, r1, r3
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <UART_SetConfig+0x2d4>)
 8003c60:	fba3 2302 	umull	r2, r3, r3, r2
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c6c:	441c      	add	r4, r3
 8003c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c80:	4642      	mov	r2, r8
 8003c82:	464b      	mov	r3, r9
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c90:	4641      	mov	r1, r8
 8003c92:	1851      	adds	r1, r2, r1
 8003c94:	6339      	str	r1, [r7, #48]	; 0x30
 8003c96:	4649      	mov	r1, r9
 8003c98:	414b      	adcs	r3, r1
 8003c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ca8:	4659      	mov	r1, fp
 8003caa:	00cb      	lsls	r3, r1, #3
 8003cac:	4651      	mov	r1, sl
 8003cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb2:	4651      	mov	r1, sl
 8003cb4:	00ca      	lsls	r2, r1, #3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	189b      	adds	r3, r3, r2
 8003cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	460a      	mov	r2, r1
 8003cc8:	eb42 0303 	adc.w	r3, r2, r3
 8003ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	18db      	adds	r3, r3, r3
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cea:	4613      	mov	r3, r2
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cfa:	f7fc fd87 	bl	800080c <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <UART_SetConfig+0x2d4>)
 8003d04:	fba3 1302 	umull	r1, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	2164      	movs	r1, #100	; 0x64
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	3332      	adds	r3, #50	; 0x32
 8003d16:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <UART_SetConfig+0x2d4>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 0207 	and.w	r2, r3, #7
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4422      	add	r2, r4
 8003d2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d2c:	e105      	b.n	8003f3a <UART_SetConfig+0x4d6>
 8003d2e:	bf00      	nop
 8003d30:	40011000 	.word	0x40011000
 8003d34:	40011400 	.word	0x40011400
 8003d38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d4e:	4642      	mov	r2, r8
 8003d50:	464b      	mov	r3, r9
 8003d52:	1891      	adds	r1, r2, r2
 8003d54:	6239      	str	r1, [r7, #32]
 8003d56:	415b      	adcs	r3, r3
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d5e:	4641      	mov	r1, r8
 8003d60:	1854      	adds	r4, r2, r1
 8003d62:	4649      	mov	r1, r9
 8003d64:	eb43 0501 	adc.w	r5, r3, r1
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	00eb      	lsls	r3, r5, #3
 8003d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d76:	00e2      	lsls	r2, r4, #3
 8003d78:	4614      	mov	r4, r2
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	4643      	mov	r3, r8
 8003d7e:	18e3      	adds	r3, r4, r3
 8003d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d84:	464b      	mov	r3, r9
 8003d86:	eb45 0303 	adc.w	r3, r5, r3
 8003d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003daa:	4629      	mov	r1, r5
 8003dac:	008b      	lsls	r3, r1, #2
 8003dae:	4621      	mov	r1, r4
 8003db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db4:	4621      	mov	r1, r4
 8003db6:	008a      	lsls	r2, r1, #2
 8003db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dbc:	f7fc fd26 	bl	800080c <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4b60      	ldr	r3, [pc, #384]	; (8003f48 <UART_SetConfig+0x4e4>)
 8003dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	011c      	lsls	r4, r3, #4
 8003dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003de0:	4642      	mov	r2, r8
 8003de2:	464b      	mov	r3, r9
 8003de4:	1891      	adds	r1, r2, r2
 8003de6:	61b9      	str	r1, [r7, #24]
 8003de8:	415b      	adcs	r3, r3
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df0:	4641      	mov	r1, r8
 8003df2:	1851      	adds	r1, r2, r1
 8003df4:	6139      	str	r1, [r7, #16]
 8003df6:	4649      	mov	r1, r9
 8003df8:	414b      	adcs	r3, r1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e08:	4659      	mov	r1, fp
 8003e0a:	00cb      	lsls	r3, r1, #3
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e12:	4651      	mov	r1, sl
 8003e14:	00ca      	lsls	r2, r1, #3
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e24:	464b      	mov	r3, r9
 8003e26:	460a      	mov	r2, r1
 8003e28:	eb42 0303 	adc.w	r3, r2, r3
 8003e2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e48:	4649      	mov	r1, r9
 8003e4a:	008b      	lsls	r3, r1, #2
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e52:	4641      	mov	r1, r8
 8003e54:	008a      	lsls	r2, r1, #2
 8003e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e5a:	f7fc fcd7 	bl	800080c <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <UART_SetConfig+0x4e4>)
 8003e64:	fba3 1302 	umull	r1, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	2164      	movs	r1, #100	; 0x64
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	3332      	adds	r3, #50	; 0x32
 8003e76:	4a34      	ldr	r2, [pc, #208]	; (8003f48 <UART_SetConfig+0x4e4>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e82:	441c      	add	r4, r3
 8003e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e88:	2200      	movs	r2, #0
 8003e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e8c:	677a      	str	r2, [r7, #116]	; 0x74
 8003e8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e92:	4642      	mov	r2, r8
 8003e94:	464b      	mov	r3, r9
 8003e96:	1891      	adds	r1, r2, r2
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	1851      	adds	r1, r2, r1
 8003ea6:	6039      	str	r1, [r7, #0]
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	414b      	adcs	r3, r1
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eba:	4659      	mov	r1, fp
 8003ebc:	00cb      	lsls	r3, r1, #3
 8003ebe:	4651      	mov	r1, sl
 8003ec0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec4:	4651      	mov	r1, sl
 8003ec6:	00ca      	lsls	r2, r1, #3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4642      	mov	r2, r8
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ee8:	667a      	str	r2, [r7, #100]	; 0x64
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	008b      	lsls	r3, r1, #2
 8003efa:	4641      	mov	r1, r8
 8003efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f00:	4641      	mov	r1, r8
 8003f02:	008a      	lsls	r2, r1, #2
 8003f04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f08:	f7fc fc80 	bl	800080c <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <UART_SetConfig+0x4e4>)
 8003f12:	fba3 1302 	umull	r1, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2164      	movs	r1, #100	; 0x64
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	3332      	adds	r3, #50	; 0x32
 8003f24:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <UART_SetConfig+0x4e4>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4422      	add	r2, r4
 8003f38:	609a      	str	r2, [r3, #8]
}
 8003f3a:	bf00      	nop
 8003f3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	51eb851f 	.word	0x51eb851f

08003f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f50:	f7fd fbd2 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f54:	f000 f820 	bl	8003f98 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  uartInit();
 8003f58:	f7fd f830 	bl	8000fbc <uartInit>
  MX_I2C1_Init();
 8003f5c:	f000 f886 	bl	800406c <MX_I2C1_Init>
  HAL_I2C_MspInit(&hi2c1);
 8003f60:	480c      	ldr	r0, [pc, #48]	; (8003f94 <main+0x48>)
 8003f62:	f000 f8c3 	bl	80040ec <HAL_I2C_MspInit>
  sht4x_init(&hi2c1);
 8003f66:	480b      	ldr	r0, [pc, #44]	; (8003f94 <main+0x48>)
 8003f68:	f7fd f950 	bl	800120c <sht4x_init>
  sunrise_init(&hi2c1);
 8003f6c:	4809      	ldr	r0, [pc, #36]	; (8003f94 <main+0x48>)
 8003f6e:	f7fd fa55 	bl	800141c <sunrise_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	/* Initialize BSP PB for BUTTON_USER */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8003f72:	2100      	movs	r1, #0
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7fd faef 	bl	8001558 <BSP_PB_Init>
	debounceFSM_init();
 8003f7a:	f7fc fdd7 	bl	8000b2c <debounceFSM_init>
	clickStateFSM_init();
 8003f7e:	f7fc fea3 	bl	8000cc8 <clickStateFSM_init>
  	measurement_FSM_init();
 8003f82:	f7fc fefd 	bl	8000d80 <measurement_FSM_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  measurement_FSM_update();
 8003f86:	f7fc ffb5 	bl	8000ef4 <measurement_FSM_update>
	  debounceFSM_update();
 8003f8a:	f7fc fddf 	bl	8000b4c <debounceFSM_update>
	  clickFSM_update();
 8003f8e:	f7fc feab 	bl	8000ce8 <clickFSM_update>
	  measurement_FSM_update();
 8003f92:	e7f8      	b.n	8003f86 <main+0x3a>
 8003f94:	200000d4 	.word	0x200000d4

08003f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b094      	sub	sp, #80	; 0x50
 8003f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f9e:	f107 0320 	add.w	r3, r7, #32
 8003fa2:	2230      	movs	r2, #48	; 0x30
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f956 	bl	8004258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fac:	f107 030c 	add.w	r3, r7, #12
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <SystemClock_Config+0xcc>)
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <SystemClock_Config+0xcc>)
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6413      	str	r3, [r2, #64]	; 0x40
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <SystemClock_Config+0xcc>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <SystemClock_Config+0xd0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a21      	ldr	r2, [pc, #132]	; (8004068 <SystemClock_Config+0xd0>)
 8003fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <SystemClock_Config+0xd0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003ff8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ffe:	2302      	movs	r3, #2
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004008:	2304      	movs	r3, #4
 800400a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800400c:	23a8      	movs	r3, #168	; 0xa8
 800400e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004010:	2302      	movs	r3, #2
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004014:	2307      	movs	r3, #7
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004018:	f107 0320 	add.w	r3, r7, #32
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe ff3b 	bl	8002e98 <HAL_RCC_OscConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004028:	f000 f8a8 	bl	800417c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800402c:	230f      	movs	r3, #15
 800402e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004030:	2302      	movs	r3, #2
 8004032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004038:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800403c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800403e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004042:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	2105      	movs	r1, #5
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff f99c 	bl	8003388 <HAL_RCC_ClockConfig>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004056:	f000 f891 	bl	800417c <Error_Handler>
  }
}
 800405a:	bf00      	nop
 800405c:	3750      	adds	r7, #80	; 0x50
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000

0800406c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <MX_I2C1_Init+0x78>)
 8004074:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004076:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004078:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <MX_I2C1_Init+0x7c>)
 800407a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800407c:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <MX_I2C1_Init+0x74>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004084:	2200      	movs	r2, #0
 8004086:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <MX_I2C1_Init+0x74>)
 800408a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800408e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004092:	2200      	movs	r2, #0
 8004094:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <MX_I2C1_Init+0x74>)
 8004098:	2200      	movs	r2, #0
 800409a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800409c:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <MX_I2C1_Init+0x74>)
 800409e:	2200      	movs	r2, #0
 80040a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <MX_I2C1_Init+0x74>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040a8:	480d      	ldr	r0, [pc, #52]	; (80040e0 <MX_I2C1_Init+0x74>)
 80040aa:	f7fd fe8b 	bl	8001dc4 <HAL_I2C_Init>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80040b4:	f000 f862 	bl	800417c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040b8:	2100      	movs	r1, #0
 80040ba:	4809      	ldr	r0, [pc, #36]	; (80040e0 <MX_I2C1_Init+0x74>)
 80040bc:	f7fe fe17 	bl	8002cee <HAL_I2CEx_ConfigAnalogFilter>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80040c6:	f000 f859 	bl	800417c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040ca:	2100      	movs	r1, #0
 80040cc:	4804      	ldr	r0, [pc, #16]	; (80040e0 <MX_I2C1_Init+0x74>)
 80040ce:	f7fe fe4a 	bl	8002d66 <HAL_I2CEx_ConfigDigitalFilter>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80040d8:	f000 f850 	bl	800417c <Error_Handler>
  }


}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	200000d4 	.word	0x200000d4
 80040e4:	40005400 	.word	0x40005400
 80040e8:	000186a0 	.word	0x000186a0

080040ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a19      	ldr	r2, [pc, #100]	; (8004170 <HAL_I2C_MspInit+0x84>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d12c      	bne.n	8004168 <HAL_I2C_MspInit+0x7c>
  {


    __HAL_RCC_GPIOB_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_I2C_MspInit+0x88>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_I2C_MspInit+0x88>)
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	6313      	str	r3, [r2, #48]	; 0x30
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_I2C_MspInit+0x88>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800412a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800412e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004130:	2312      	movs	r3, #18
 8004132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004138:	2303      	movs	r3, #3
 800413a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800413c:	2304      	movs	r3, #4
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	4619      	mov	r1, r3
 8004146:	480c      	ldr	r0, [pc, #48]	; (8004178 <HAL_I2C_MspInit+0x8c>)
 8004148:	f7fd fc78 	bl	8001a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_I2C_MspInit+0x88>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	4a07      	ldr	r2, [pc, #28]	; (8004174 <HAL_I2C_MspInit+0x88>)
 8004156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800415a:	6413      	str	r3, [r2, #64]	; 0x40
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_I2C_MspInit+0x88>)
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]

  }

}
 8004168:	bf00      	nop
 800416a:	3728      	adds	r7, #40	; 0x28
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40005400 	.word	0x40005400
 8004174:	40023800 	.word	0x40023800
 8004178:	40020400 	.word	0x40020400

0800417c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004180:	b672      	cpsid	i
}
 8004182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004184:	e7fe      	b.n	8004184 <Error_Handler+0x8>
	...

08004188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041c0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800418c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800418e:	e003      	b.n	8004198 <LoopCopyDataInit>

08004190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004196:	3104      	adds	r1, #4

08004198 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004198:	480b      	ldr	r0, [pc, #44]	; (80041c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800419c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800419e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041a0:	d3f6      	bcc.n	8004190 <CopyDataInit>
  ldr  r2, =_sbss
 80041a2:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041a4:	e002      	b.n	80041ac <LoopFillZerobss>

080041a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041a8:	f842 3b04 	str.w	r3, [r2], #4

080041ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041b0:	d3f9      	bcc.n	80041a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041b2:	f7fd fa3d 	bl	8001630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041b6:	f000 f811 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041ba:	f7ff fec7 	bl	8003f4c <main>
  bx  lr    
 80041be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80041c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80041c4:	080043a4 	.word	0x080043a4
  ldr  r0, =_sdata
 80041c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041cc:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 80041d0:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 80041d4:	20000128 	.word	0x20000128

080041d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041d8:	e7fe      	b.n	80041d8 <ADC_IRQHandler>
	...

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4d0d      	ldr	r5, [pc, #52]	; (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	; (8004218 <__libc_init_array+0x3c>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2600      	movs	r6, #0
 80041e8:	42a6      	cmp	r6, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4d0b      	ldr	r5, [pc, #44]	; (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	; (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 f87c 	bl	80042ec <_init>
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2600      	movs	r6, #0
 80041fa:	42a6      	cmp	r6, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f855 3b04 	ldr.w	r3, [r5], #4
 8004204:	4798      	blx	r3
 8004206:	3601      	adds	r6, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f855 3b04 	ldr.w	r3, [r5], #4
 800420e:	4798      	blx	r3
 8004210:	3601      	adds	r6, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	0800439c 	.word	0x0800439c
 8004218:	0800439c 	.word	0x0800439c
 800421c:	0800439c 	.word	0x0800439c
 8004220:	080043a0 	.word	0x080043a0

08004224 <__itoa>:
 8004224:	1e93      	subs	r3, r2, #2
 8004226:	2b22      	cmp	r3, #34	; 0x22
 8004228:	b510      	push	{r4, lr}
 800422a:	460c      	mov	r4, r1
 800422c:	d904      	bls.n	8004238 <__itoa+0x14>
 800422e:	2300      	movs	r3, #0
 8004230:	700b      	strb	r3, [r1, #0]
 8004232:	461c      	mov	r4, r3
 8004234:	4620      	mov	r0, r4
 8004236:	bd10      	pop	{r4, pc}
 8004238:	2a0a      	cmp	r2, #10
 800423a:	d109      	bne.n	8004250 <__itoa+0x2c>
 800423c:	2800      	cmp	r0, #0
 800423e:	da07      	bge.n	8004250 <__itoa+0x2c>
 8004240:	232d      	movs	r3, #45	; 0x2d
 8004242:	700b      	strb	r3, [r1, #0]
 8004244:	4240      	negs	r0, r0
 8004246:	2101      	movs	r1, #1
 8004248:	4421      	add	r1, r4
 800424a:	f000 f80d 	bl	8004268 <__utoa>
 800424e:	e7f1      	b.n	8004234 <__itoa+0x10>
 8004250:	2100      	movs	r1, #0
 8004252:	e7f9      	b.n	8004248 <__itoa+0x24>

08004254 <itoa>:
 8004254:	f7ff bfe6 	b.w	8004224 <__itoa>

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <__utoa>:
 8004268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426a:	4c1f      	ldr	r4, [pc, #124]	; (80042e8 <__utoa+0x80>)
 800426c:	b08b      	sub	sp, #44	; 0x2c
 800426e:	4605      	mov	r5, r0
 8004270:	460b      	mov	r3, r1
 8004272:	466e      	mov	r6, sp
 8004274:	f104 0c20 	add.w	ip, r4, #32
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	6861      	ldr	r1, [r4, #4]
 800427c:	4637      	mov	r7, r6
 800427e:	c703      	stmia	r7!, {r0, r1}
 8004280:	3408      	adds	r4, #8
 8004282:	4564      	cmp	r4, ip
 8004284:	463e      	mov	r6, r7
 8004286:	d1f7      	bne.n	8004278 <__utoa+0x10>
 8004288:	7921      	ldrb	r1, [r4, #4]
 800428a:	7139      	strb	r1, [r7, #4]
 800428c:	1e91      	subs	r1, r2, #2
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	6038      	str	r0, [r7, #0]
 8004292:	2922      	cmp	r1, #34	; 0x22
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	d904      	bls.n	80042a4 <__utoa+0x3c>
 800429a:	7019      	strb	r1, [r3, #0]
 800429c:	460b      	mov	r3, r1
 800429e:	4618      	mov	r0, r3
 80042a0:	b00b      	add	sp, #44	; 0x2c
 80042a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a4:	1e58      	subs	r0, r3, #1
 80042a6:	4684      	mov	ip, r0
 80042a8:	fbb5 f7f2 	udiv	r7, r5, r2
 80042ac:	fb02 5617 	mls	r6, r2, r7, r5
 80042b0:	3628      	adds	r6, #40	; 0x28
 80042b2:	446e      	add	r6, sp
 80042b4:	460c      	mov	r4, r1
 80042b6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80042ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80042be:	462e      	mov	r6, r5
 80042c0:	42b2      	cmp	r2, r6
 80042c2:	f101 0101 	add.w	r1, r1, #1
 80042c6:	463d      	mov	r5, r7
 80042c8:	d9ee      	bls.n	80042a8 <__utoa+0x40>
 80042ca:	2200      	movs	r2, #0
 80042cc:	545a      	strb	r2, [r3, r1]
 80042ce:	1919      	adds	r1, r3, r4
 80042d0:	1aa5      	subs	r5, r4, r2
 80042d2:	42aa      	cmp	r2, r5
 80042d4:	dae3      	bge.n	800429e <__utoa+0x36>
 80042d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80042da:	780e      	ldrb	r6, [r1, #0]
 80042dc:	7006      	strb	r6, [r0, #0]
 80042de:	3201      	adds	r2, #1
 80042e0:	f801 5901 	strb.w	r5, [r1], #-1
 80042e4:	e7f4      	b.n	80042d0 <__utoa+0x68>
 80042e6:	bf00      	nop
 80042e8:	0800436c 	.word	0x0800436c

080042ec <_init>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr

080042f8 <_fini>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	bf00      	nop
 80042fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fe:	bc08      	pop	{r3}
 8004300:	469e      	mov	lr, r3
 8004302:	4770      	bx	lr
